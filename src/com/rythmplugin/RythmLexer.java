/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.rythmplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.rythmplugin.psi.RythmTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Rythm.flex</tt>
 */
class RythmLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ST_ACTION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\10\2\1\22\0\1\2\1\44\1\31\3\0\1\46\1\0\1\30\1\17\1\52\3\0"+
    "\1\33\1\54\1\60\1\26\6\57\1\27\1\51\2\0\1\50\1\45\1\47\1\0\1\3\6\55\21\32"+
    "\1\61\2\32\4\0\1\36\1\0\1\4\1\56\1\12\1\21\1\11\1\34\1\6\1\35\1\14\1\35\1"+
    "\25\1\41\1\22\1\16\1\15\1\23\1\37\1\5\1\7\1\13\1\40\1\24\1\35\1\20\2\35\1"+
    "\43\1\0\1\53\7\0\1\10\32\0\1\42\337\0\1\42\177\0\13\42\35\0\2\10\5\0\1\42"+
    "\57\0\1\42\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\1\1\2\1\1\2\2\1\3\1\4"+
    "\1\2\1\5\1\6\1\2\1\5\10\7\1\3\1\1"+
    "\4\0\1\6\3\0\1\5\6\7\1\0\3\7\1\1"+
    "\1\0\1\10\5\0\1\5\6\7\4\0\1\7\1\11"+
    "\6\0\1\7\1\12\1\1\3\0\1\10\2\0\1\13"+
    "\5\7\1\14\1\11\14\0\4\11\1\0\1\11\12\0"+
    "\1\11\1\7\1\0\1\7\1\12\1\1\1\15\1\10"+
    "\2\0\5\7\16\0\7\11\1\0\5\11\2\0\2\11"+
    "\1\7\2\10\1\0\1\16\2\7\1\17\1\20\6\0"+
    "\1\11\4\0\11\11\1\21\2\10\1\0\1\7\1\16"+
    "\1\22\1\23\1\0\1\7\1\17\7\0\1\11\2\0"+
    "\1\11\1\0\1\7\1\22\1\0\1\7\1\23\5\0"+
    "\2\11\1\0\1\14\3\0\1\11\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\372\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\372\0\u041a"+
    "\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a"+
    "\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\372\0\u0866\0\u0898"+
    "\0\u08ca\0\u08fc\0\u092e\0\u05aa\0\u0960\0\u0992\0\u09c4\0\u09f6"+
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u0abe\0\u1004"+
    "\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194"+
    "\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324"+
    "\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4"+
    "\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u0d16\0\u15e0"+
    "\0\u1612\0\372\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e"+
    "\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce"+
    "\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e"+
    "\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee"+
    "\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e"+
    "\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e"+
    "\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e"+
    "\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e"+
    "\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u02ee\0\u238c"+
    "\0\u0834\0\u23be\0\u1eaa\0\u23be\0\u23f0\0\u2422\0\u2454\0\u1f40"+
    "\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2"+
    "\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac\0\u23f0\0\u26ac\0\u26de"+
    "\0\u2422\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a"+
    "\0\u283c\0\u286e\0\u2710\0\u28a0\0\u280a\0\u28d2\0\u2904\0\u2936"+
    "\0\u2968";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\3\1\4\5\3\1\5\5\3\1\6\10\3\1\6"+
    "\2\3\1\7\7\3\1\6\6\3\1\10\1\6\6\3"+
    "\1\6\2\11\1\4\4\6\1\0\1\12\14\6\2\13"+
    "\3\6\1\7\13\6\1\14\1\15\1\13\1\10\4\6"+
    "\1\13\1\16\1\6\3\3\1\0\13\3\1\0\10\3"+
    "\1\0\2\3\1\0\7\3\1\0\6\3\2\0\6\3"+
    "\4\0\1\17\1\20\1\21\1\22\1\0\1\23\2\21"+
    "\1\24\2\21\1\0\3\21\1\25\2\21\4\0\1\21"+
    "\1\0\1\26\1\21\1\0\3\21\10\0\1\27\2\0"+
    "\2\21\2\0\1\21\3\3\1\0\13\3\1\0\10\3"+
    "\1\0\2\3\1\0\5\3\1\30\1\3\1\0\6\3"+
    "\2\0\6\3\66\0\2\31\1\32\1\31\1\0\1\33"+
    "\5\31\1\0\6\31\4\0\1\31\1\0\2\31\1\0"+
    "\3\31\13\0\2\31\2\0\1\31\1\10\1\0\6\10"+
    "\1\0\51\10\1\0\2\11\120\0\1\34\46\0\2\13"+
    "\21\0\1\13\5\0\2\13\5\0\4\35\1\0\6\35"+
    "\1\0\6\35\4\0\1\36\1\0\2\35\1\0\3\35"+
    "\12\0\1\37\1\36\1\35\2\0\1\36\20\0\1\40"+
    "\5\0\1\41\30\0\2\41\1\40\4\0\1\21\1\42"+
    "\2\21\1\0\6\21\1\0\6\21\4\0\1\21\1\0"+
    "\2\21\1\0\3\21\13\0\2\21\2\0\1\21\4\0"+
    "\4\21\1\0\1\43\5\21\1\0\6\21\4\0\1\21"+
    "\1\0\2\21\1\0\3\21\13\0\2\21\2\0\1\21"+
    "\4\0\4\21\1\0\6\21\1\0\6\21\4\0\1\21"+
    "\1\0\2\21\1\0\3\21\13\0\2\21\2\0\1\21"+
    "\4\0\4\21\1\0\1\44\5\21\1\0\6\21\4\0"+
    "\1\21\1\0\2\21\1\0\3\21\13\0\2\21\2\0"+
    "\1\21\4\0\4\21\1\0\6\21\1\0\1\45\5\21"+
    "\4\0\1\21\1\0\2\21\1\0\3\21\13\0\2\21"+
    "\2\0\1\21\4\0\4\21\1\0\5\21\1\46\1\0"+
    "\2\21\1\47\3\21\1\50\3\0\1\21\1\0\1\51"+
    "\1\21\1\0\3\21\13\0\2\21\2\0\1\21\4\0"+
    "\1\21\1\52\2\21\1\0\6\21\1\0\6\21\4\0"+
    "\1\21\1\0\2\21\1\0\3\21\13\0\2\21\2\0"+
    "\1\21\4\0\4\21\1\0\4\21\1\53\1\21\1\0"+
    "\6\21\4\0\1\21\1\0\2\21\1\0\3\21\13\0"+
    "\2\21\2\0\1\21\3\3\1\0\3\3\1\54\7\3"+
    "\1\0\10\3\1\0\2\3\1\0\7\3\1\0\6\3"+
    "\2\0\6\3\4\0\4\55\1\0\6\55\1\56\6\55"+
    "\2\0\1\57\1\0\1\55\1\0\2\55\1\60\3\55"+
    "\13\0\2\55\2\0\1\55\4\0\4\55\1\0\1\61"+
    "\5\55\1\56\6\55\2\0\1\57\1\0\1\55\1\0"+
    "\2\55\1\60\3\55\13\0\2\55\2\0\1\55\4\0"+
    "\4\55\1\0\6\55\1\56\6\55\2\0\1\57\1\0"+
    "\1\55\1\0\2\55\1\60\1\62\2\55\13\0\2\55"+
    "\2\0\1\55\7\0\1\63\56\0\4\35\1\0\6\35"+
    "\1\0\6\35\4\0\1\36\1\0\2\35\1\0\3\35"+
    "\5\0\1\14\5\0\1\36\1\35\2\0\1\36\4\0"+
    "\4\36\1\0\6\36\1\0\6\36\4\0\1\36\1\0"+
    "\2\36\1\0\3\36\5\0\1\14\5\0\2\36\2\0"+
    "\1\36\4\0\4\36\1\0\6\36\1\0\6\36\4\0"+
    "\1\36\1\0\2\36\1\0\3\36\13\0\2\36\2\0"+
    "\1\36\4\0\1\64\4\0\2\64\6\0\1\64\4\0"+
    "\2\64\4\0\1\64\14\0\1\64\3\0\4\64\27\0"+
    "\1\41\30\0\2\41\5\0\2\21\1\65\1\21\1\0"+
    "\6\21\1\0\6\21\4\0\1\21\1\0\2\21\1\0"+
    "\3\21\13\0\2\21\2\0\1\21\4\0\4\21\1\0"+
    "\5\21\1\66\1\0\6\21\4\0\1\21\1\0\2\21"+
    "\1\0\3\21\13\0\2\21\2\0\1\21\4\0\4\21"+
    "\1\0\1\21\1\67\4\21\1\0\6\21\4\0\1\21"+
    "\1\0\2\21\1\0\3\21\13\0\2\21\2\0\1\21"+
    "\4\0\4\21\1\0\2\21\1\70\3\21\1\0\6\21"+
    "\4\0\1\21\1\0\2\21\1\0\3\21\13\0\2\21"+
    "\2\0\1\21\4\0\4\21\1\0\6\21\1\0\4\21"+
    "\1\71\1\21\4\0\1\21\1\0\2\21\1\0\3\21"+
    "\13\0\2\21\2\0\1\21\4\0\4\21\1\0\6\21"+
    "\1\0\3\21\1\72\2\21\4\0\1\21\1\0\2\21"+
    "\1\0\3\21\13\0\2\21\2\0\1\21\27\0\1\73"+
    "\32\0\1\74\1\75\1\76\1\74\4\77\1\75\6\77"+
    "\1\100\6\77\2\74\1\101\1\102\1\77\1\103\2\77"+
    "\1\74\3\77\1\76\1\74\1\104\1\105\1\106\6\74"+
    "\2\77\2\74\1\77\4\0\4\21\1\0\1\107\5\21"+
    "\1\0\6\21\4\0\1\21\1\0\2\21\1\0\3\21"+
    "\13\0\2\21\2\0\1\21\4\0\1\21\1\110\2\21"+
    "\1\0\6\21\1\0\6\21\4\0\1\21\1\0\2\21"+
    "\1\0\3\21\13\0\2\21\2\0\1\21\3\3\1\0"+
    "\5\3\1\111\5\3\1\0\10\3\1\0\2\3\1\0"+
    "\7\3\1\0\6\3\2\0\6\3\4\0\4\55\1\0"+
    "\6\55\1\56\6\55\2\0\1\112\1\0\1\55\1\0"+
    "\2\55\1\60\3\55\13\0\2\55\2\0\1\55\4\0"+
    "\4\113\1\0\6\113\1\56\6\113\2\0\1\57\1\0"+
    "\1\113\1\0\2\113\1\0\3\113\13\0\2\113\2\0"+
    "\1\113\17\0\1\56\10\0\1\112\1\0\1\114\3\0"+
    "\1\60\16\0\1\114\3\0\1\114\4\0\4\55\1\0"+
    "\2\55\1\115\3\55\1\56\6\55\2\0\1\112\1\0"+
    "\1\55\1\0\2\55\1\60\3\55\13\0\2\55\2\0"+
    "\1\55\4\0\4\55\1\0\6\55\1\56\6\55\2\0"+
    "\1\112\1\0\1\55\1\0\2\55\1\60\1\55\1\116"+
    "\1\55\13\0\2\55\2\0\1\55\11\0\1\117\54\0"+
    "\3\21\1\120\1\0\6\21\1\0\6\21\4\0\1\21"+
    "\1\0\2\21\1\0\3\21\13\0\2\21\2\0\1\21"+
    "\4\0\4\21\1\0\6\21\1\0\1\21\1\121\4\21"+
    "\4\0\1\21\1\0\2\21\1\0\3\21\13\0\2\21"+
    "\2\0\1\21\4\0\4\21\1\0\2\21\1\122\3\21"+
    "\1\0\6\21\4\0\1\21\1\0\2\21\1\0\3\21"+
    "\13\0\2\21\2\0\1\21\4\0\4\21\1\0\1\123"+
    "\5\21\1\0\6\21\4\0\1\21\1\0\2\21\1\0"+
    "\3\21\13\0\2\21\2\0\1\21\4\0\4\21\1\0"+
    "\4\21\1\124\1\21\1\0\6\21\4\0\1\21\1\0"+
    "\2\21\1\0\3\21\13\0\2\21\2\0\1\21\4\0"+
    "\4\21\1\0\4\21\1\125\1\21\1\0\6\21\4\0"+
    "\1\21\1\0\2\21\1\0\3\21\13\0\2\21\2\0"+
    "\1\21\16\0\1\126\43\0\1\74\1\0\6\74\1\0"+
    "\6\74\1\127\42\74\1\130\2\75\1\130\4\131\1\75"+
    "\6\131\1\100\6\131\2\130\1\132\1\133\1\131\1\134"+
    "\2\131\1\130\3\131\1\75\1\130\1\135\1\136\1\106"+
    "\6\130\2\131\2\130\1\131\1\74\1\75\1\76\1\74"+
    "\4\137\1\75\6\137\1\100\6\137\2\74\1\101\1\102"+
    "\1\137\1\103\2\137\1\74\3\137\1\76\1\74\1\104"+
    "\1\105\1\106\6\74\2\137\2\74\1\137\1\74\1\140"+
    "\1\141\1\74\4\77\1\140\6\77\1\100\6\77\2\74"+
    "\1\142\1\102\1\77\1\103\2\77\1\74\3\77\1\141"+
    "\1\74\1\143\1\105\1\106\6\74\2\77\2\74\1\77"+
    "\1\74\1\140\1\141\1\74\4\144\1\140\6\144\1\100"+
    "\6\144\2\74\1\145\1\74\1\144\1\146\2\144\1\74"+
    "\3\144\1\141\1\74\1\143\1\147\1\106\6\74\2\144"+
    "\2\74\1\144\1\74\1\140\1\141\1\74\4\137\1\140"+
    "\6\137\1\100\6\137\2\74\1\101\1\102\1\137\1\103"+
    "\2\137\1\74\3\137\1\141\1\74\1\104\1\105\1\106"+
    "\6\74\2\137\2\74\1\137\1\74\1\0\2\74\4\150"+
    "\1\0\6\150\1\151\6\150\2\74\1\152\1\102\1\150"+
    "\1\153\2\150\1\74\3\150\13\74\2\150\2\74\1\150"+
    "\1\74\1\140\1\141\1\74\4\154\1\140\6\154\1\100"+
    "\6\154\2\74\1\142\1\102\1\154\1\103\2\154\1\74"+
    "\3\154\1\141\1\74\1\143\1\105\1\106\6\74\2\154"+
    "\2\74\1\154\1\74\1\155\1\156\1\74\4\157\1\155"+
    "\6\157\1\151\6\157\2\74\1\160\1\102\1\157\1\161"+
    "\2\157\1\74\3\157\1\156\1\74\1\104\1\105\7\74"+
    "\2\157\2\74\1\157\1\74\1\155\1\156\5\74\1\155"+
    "\6\74\1\127\22\74\1\156\2\74\1\105\14\74\1\162"+
    "\2\163\5\162\1\163\6\162\1\164\22\162\1\163\3\162"+
    "\1\106\13\162\4\0\4\21\1\0\6\21\1\0\6\21"+
    "\4\0\1\21\1\0\1\165\1\21\1\0\3\21\13\0"+
    "\2\21\2\0\1\21\1\166\1\0\2\166\4\167\1\0"+
    "\6\167\1\170\6\167\4\166\1\167\1\166\2\167\1\166"+
    "\3\167\13\166\2\167\2\166\1\167\1\3\2\171\1\0"+
    "\4\3\1\171\6\3\1\0\10\3\1\0\2\3\1\0"+
    "\6\3\1\171\1\172\6\3\2\0\6\3\17\0\1\56"+
    "\10\0\1\112\35\0\4\113\1\0\6\113\1\56\6\113"+
    "\4\0\1\113\1\0\2\113\1\0\3\113\13\0\2\113"+
    "\2\0\1\113\17\0\1\56\10\0\1\112\1\0\1\114"+
    "\22\0\1\114\3\0\1\114\4\0\4\173\1\0\6\173"+
    "\1\56\6\173\2\0\1\112\1\0\1\173\1\0\2\173"+
    "\1\60\3\173\13\0\2\173\2\0\1\173\4\0\1\174"+
    "\3\55\1\0\6\55\1\56\6\55\2\0\1\112\1\0"+
    "\1\55\1\0\2\55\1\60\3\55\13\0\2\55\2\0"+
    "\1\55\1\0\2\175\5\0\1\175\31\0\1\175\1\172"+
    "\16\0\1\120\1\0\6\120\1\0\51\120\4\0\4\21"+
    "\1\0\1\176\5\21\1\0\6\21\4\0\1\21\1\0"+
    "\2\21\1\0\3\21\13\0\2\21\2\0\1\21\4\0"+
    "\4\21\1\0\3\21\1\177\2\21\1\0\6\21\4\0"+
    "\1\21\1\0\2\21\1\0\3\21\13\0\2\21\2\0"+
    "\1\21\4\0\4\21\1\0\5\21\1\200\1\0\6\21"+
    "\4\0\1\21\1\0\2\21\1\0\3\21\13\0\2\21"+
    "\2\0\1\21\4\0\4\21\1\0\6\21\1\0\5\21"+
    "\1\201\4\0\1\21\1\0\2\21\1\0\3\21\13\0"+
    "\2\21\2\0\1\21\4\0\1\21\1\202\2\21\1\0"+
    "\6\21\1\0\6\21\4\0\1\21\1\0\2\21\1\0"+
    "\3\21\13\0\2\21\2\0\1\21\30\0\1\203\31\0"+
    "\1\130\1\0\6\130\1\0\6\130\1\74\43\130\2\140"+
    "\1\130\4\131\1\140\6\131\1\100\6\131\2\130\1\204"+
    "\1\133\1\131\1\134\2\131\1\130\3\131\1\140\1\130"+
    "\1\205\1\136\1\106\6\130\2\131\2\130\1\131\1\130"+
    "\2\140\1\130\4\131\1\140\6\131\1\100\6\131\2\130"+
    "\1\132\1\133\1\131\1\134\2\131\1\130\3\131\1\140"+
    "\1\130\1\135\1\136\1\106\6\130\2\131\2\130\1\131"+
    "\1\130\1\0\2\130\4\206\1\0\6\206\1\151\6\206"+
    "\2\130\1\207\1\133\1\206\1\210\2\206\1\130\3\206"+
    "\13\130\2\206\2\130\1\206\1\130\2\140\1\130\4\211"+
    "\1\140\6\211\1\100\6\211\2\130\1\204\1\133\1\211"+
    "\1\134\2\211\1\130\3\211\1\140\1\130\1\205\1\136"+
    "\1\106\6\130\2\211\2\130\1\211\1\130\2\155\1\130"+
    "\4\212\1\155\6\212\1\151\6\212\2\130\1\213\1\133"+
    "\1\212\1\214\2\212\1\130\3\212\1\155\1\130\1\135"+
    "\1\136\7\130\2\212\2\130\1\212\1\130\2\155\5\130"+
    "\1\155\6\130\1\74\22\130\1\155\2\130\1\136\14\130"+
    "\1\74\1\140\1\141\1\74\4\137\1\140\6\137\1\100"+
    "\6\137\2\74\1\142\1\102\1\137\1\103\2\137\1\74"+
    "\3\137\1\141\1\74\1\143\1\105\1\106\6\74\2\137"+
    "\2\74\1\137\1\130\2\140\5\130\1\140\6\130\1\74"+
    "\22\130\1\140\1\130\1\205\1\136\1\106\13\130\1\74"+
    "\1\140\1\141\5\74\1\140\6\74\1\127\22\74\1\141"+
    "\1\74\1\143\1\105\1\106\14\74\1\140\1\141\1\74"+
    "\4\215\1\140\6\215\1\100\6\215\2\74\1\142\1\102"+
    "\1\215\1\216\2\215\1\74\3\215\1\141\1\74\1\143"+
    "\1\105\1\106\6\74\2\215\2\74\1\215\1\74\1\155"+
    "\1\156\5\74\1\155\6\74\1\127\22\74\1\156\1\74"+
    "\1\143\1\105\15\74\1\217\1\220\1\74\4\144\1\217"+
    "\6\144\1\221\6\144\2\74\1\145\1\74\1\144\1\222"+
    "\2\144\1\74\3\144\1\220\3\74\1\106\6\74\2\144"+
    "\2\74\1\144\1\74\1\217\1\220\1\74\4\223\1\217"+
    "\6\223\1\221\6\223\2\74\1\145\1\74\1\223\1\222"+
    "\2\223\1\74\3\223\1\220\3\74\1\106\6\74\2\223"+
    "\2\74\1\223\1\74\1\217\1\220\1\74\4\144\1\217"+
    "\6\144\1\221\6\144\2\74\1\145\1\74\1\144\1\146"+
    "\2\144\1\74\3\144\1\220\3\74\1\106\6\74\2\144"+
    "\2\74\1\144\1\74\1\155\1\156\1\74\4\224\1\155"+
    "\6\224\1\225\6\224\2\74\1\226\1\74\1\224\1\227"+
    "\2\224\1\74\3\224\1\156\2\74\1\147\7\74\2\224"+
    "\2\74\1\224\1\74\1\0\2\74\4\150\1\0\6\150"+
    "\1\151\6\150\2\74\1\152\1\230\1\150\1\153\2\150"+
    "\1\74\3\150\13\74\2\150\2\74\1\150\1\74\1\0"+
    "\2\74\4\231\1\0\6\231\1\151\6\231\2\74\1\232"+
    "\1\74\1\231\1\233\2\231\1\74\3\231\3\74\1\234"+
    "\7\74\2\231\2\74\1\231\1\74\1\0\6\74\1\0"+
    "\6\74\1\235\10\74\1\152\32\74\1\0\2\74\4\236"+
    "\1\0\6\236\1\235\6\236\2\74\1\152\1\74\1\236"+
    "\1\153\2\236\1\74\3\236\13\74\2\236\2\74\1\236"+
    "\1\74\1\140\1\141\1\74\4\154\1\140\6\154\1\100"+
    "\6\154\2\74\1\142\1\102\1\154\1\216\2\154\1\74"+
    "\3\154\1\141\1\74\1\143\1\105\1\106\6\74\2\154"+
    "\2\74\1\154\1\130\2\155\5\130\1\155\6\130\1\74"+
    "\22\130\1\155\17\130\1\74\1\155\1\156\5\74\1\155"+
    "\6\74\1\127\22\74\1\156\20\74\1\0\2\74\4\157"+
    "\1\0\6\157\1\151\6\157\2\74\1\160\1\102\1\157"+
    "\1\161\2\157\1\74\3\157\13\74\2\157\2\74\1\157"+
    "\1\74\1\0\2\74\4\150\1\0\6\150\1\151\6\150"+
    "\2\74\1\160\1\102\1\150\1\153\2\150\1\74\3\150"+
    "\13\74\2\150\2\74\1\150\1\74\1\0\2\74\4\237"+
    "\1\0\6\237\1\151\6\237\2\74\1\160\1\102\1\237"+
    "\1\161\2\237\1\74\3\237\13\74\2\237\2\74\1\237"+
    "\1\162\1\0\6\162\1\0\6\162\1\164\43\162\2\163"+
    "\5\162\1\163\6\162\1\164\22\162\1\163\20\162\1\0"+
    "\2\162\4\240\1\0\6\240\1\164\6\240\2\162\1\241"+
    "\1\162\1\240\1\164\2\240\1\162\3\240\13\162\2\240"+
    "\2\162\1\240\4\0\4\21\1\0\3\21\1\242\2\21"+
    "\1\0\6\21\4\0\1\21\1\0\2\21\1\0\3\21"+
    "\13\0\2\21\2\0\1\21\1\166\1\0\6\166\1\0"+
    "\6\166\1\170\42\166\3\3\1\0\13\3\1\0\10\3"+
    "\1\0\2\3\1\0\7\3\1\172\6\3\2\0\6\3"+
    "\4\0\4\173\1\0\6\173\1\243\6\173\2\0\1\244"+
    "\1\0\1\173\1\0\2\173\1\60\3\173\13\0\2\173"+
    "\2\0\1\173\4\0\4\55\1\0\6\55\1\56\6\55"+
    "\2\0\1\112\1\0\1\55\1\0\2\55\1\60\2\55"+
    "\1\245\13\0\2\55\2\0\1\55\43\0\1\172\22\0"+
    "\1\21\1\246\2\21\1\0\6\21\1\0\6\21\4\0"+
    "\1\21\1\0\2\21\1\0\3\21\13\0\2\21\2\0"+
    "\1\21\4\0\4\21\1\0\4\21\1\247\1\21\1\0"+
    "\6\21\4\0\1\21\1\0\2\21\1\0\3\21\13\0"+
    "\2\21\2\0\1\21\4\0\4\21\1\0\6\21\1\0"+
    "\1\21\1\250\4\21\4\0\1\21\1\0\2\21\1\0"+
    "\3\21\13\0\2\21\2\0\1\21\4\0\4\21\1\0"+
    "\1\251\5\21\1\0\6\21\4\0\1\21\1\0\2\21"+
    "\1\0\3\21\13\0\2\21\2\0\1\21\4\0\4\21"+
    "\1\0\2\21\1\252\3\21\1\0\6\21\4\0\1\21"+
    "\1\0\2\21\1\0\3\21\13\0\2\21\2\0\1\21"+
    "\31\0\1\253\30\0\1\130\2\140\1\130\4\254\1\140"+
    "\6\254\1\100\6\254\2\130\1\204\1\133\1\254\1\255"+
    "\2\254\1\130\3\254\1\140\1\130\1\205\1\136\1\106"+
    "\6\130\2\254\2\130\1\254\1\130\2\155\5\130\1\155"+
    "\6\130\1\74\22\130\1\155\1\130\1\205\1\136\15\130"+
    "\1\0\2\130\4\206\1\0\6\206\1\151\6\206\2\130"+
    "\1\207\1\256\1\206\1\210\2\206\1\130\3\206\13\130"+
    "\2\206\2\130\1\206\1\130\1\0\6\130\1\0\6\130"+
    "\1\235\10\130\1\207\32\130\1\0\2\130\4\257\1\0"+
    "\6\257\1\235\6\257\2\130\1\207\1\130\1\257\1\210"+
    "\2\257\1\130\3\257\13\130\2\257\2\130\1\257\1\130"+
    "\2\140\1\130\4\211\1\140\6\211\1\100\6\211\2\130"+
    "\1\204\1\133\1\211\1\255\2\211\1\130\3\211\1\140"+
    "\1\130\1\205\1\136\1\106\6\130\2\211\2\130\1\211"+
    "\1\130\1\0\2\130\4\212\1\0\6\212\1\151\6\212"+
    "\2\130\1\213\1\133\1\212\1\214\2\212\1\130\3\212"+
    "\13\130\2\212\2\130\1\212\1\130\1\0\2\130\4\206"+
    "\1\0\6\206\1\151\6\206\2\130\1\213\1\133\1\206"+
    "\1\210\2\206\1\130\3\206\13\130\2\206\2\130\1\206"+
    "\1\130\1\0\2\130\4\260\1\0\6\260\1\151\6\260"+
    "\2\130\1\213\1\133\1\260\1\214\2\260\1\130\3\260"+
    "\13\130\2\260\2\130\1\260\1\74\1\140\1\141\1\74"+
    "\4\215\1\140\6\215\1\261\6\215\2\74\1\262\1\230"+
    "\1\215\1\263\2\215\1\74\3\215\1\141\1\74\1\143"+
    "\1\105\1\106\6\74\2\215\2\74\1\215\1\74\1\217"+
    "\1\220\1\74\4\264\1\217\6\264\1\221\6\264\2\74"+
    "\1\265\1\74\1\264\1\216\2\264\1\74\3\264\1\220"+
    "\3\74\1\106\6\74\2\264\2\74\1\264\1\0\2\217"+
    "\5\0\1\217\31\0\1\217\3\0\1\106\13\0\1\74"+
    "\1\217\1\220\5\74\1\217\6\74\1\127\22\74\1\220"+
    "\3\74\1\106\14\74\1\217\1\220\1\74\4\224\1\217"+
    "\6\224\1\266\6\224\2\74\1\226\1\74\1\224\1\227"+
    "\2\224\1\74\3\224\1\220\2\74\1\234\1\106\6\74"+
    "\2\224\2\74\1\224\1\74\1\217\1\220\1\74\4\267"+
    "\1\217\6\267\1\270\6\267\2\74\1\271\1\74\1\267"+
    "\1\222\2\267\1\74\3\267\1\220\3\74\1\106\6\74"+
    "\2\267\2\74\1\267\1\74\1\217\1\220\1\74\4\223"+
    "\1\217\6\223\1\270\6\223\2\74\1\271\1\74\1\223"+
    "\1\222\2\223\1\74\3\223\1\220\3\74\1\106\6\74"+
    "\2\223\2\74\1\223\1\74\1\0\2\74\4\224\1\0"+
    "\6\224\1\225\6\224\2\74\1\226\1\74\1\224\1\272"+
    "\2\224\1\74\3\224\13\74\2\224\2\74\1\224\1\74"+
    "\1\0\2\74\4\273\1\0\6\273\1\225\6\273\2\74"+
    "\1\274\1\74\1\273\1\275\2\273\1\74\3\273\13\74"+
    "\2\273\2\74\1\273\1\74\1\0\2\74\4\276\1\0"+
    "\6\276\1\225\6\276\2\74\1\226\1\74\1\276\1\272"+
    "\2\276\1\74\3\276\13\74\2\276\2\74\1\276\1\74"+
    "\1\0\2\74\4\224\1\0\6\224\1\225\6\224\2\74"+
    "\1\226\1\74\1\224\1\227\2\224\1\74\3\224\13\74"+
    "\2\224\2\74\1\224\1\74\1\0\2\74\4\236\1\0"+
    "\6\236\1\151\6\236\2\74\1\152\1\230\1\236\1\153"+
    "\2\236\1\74\3\236\13\74\2\236\2\74\1\236\1\74"+
    "\1\0\2\74\4\231\1\0\6\231\1\235\6\231\2\74"+
    "\1\232\1\74\1\231\1\272\2\231\1\74\3\231\13\74"+
    "\2\231\2\74\1\231\1\74\1\0\2\74\4\276\1\0"+
    "\6\276\1\235\6\276\2\74\1\232\1\74\1\276\1\272"+
    "\2\276\1\74\3\276\13\74\2\276\2\74\1\276\1\74"+
    "\1\0\2\74\4\231\1\0\6\231\1\235\6\231\2\74"+
    "\1\232\1\74\1\231\1\233\2\231\1\74\3\231\13\74"+
    "\2\231\2\74\1\231\1\74\1\0\2\74\4\224\1\0"+
    "\6\224\1\225\6\224\2\74\1\226\1\74\1\224\1\227"+
    "\2\224\1\74\3\224\3\74\1\234\7\74\2\224\2\74"+
    "\1\224\1\74\1\0\2\74\4\224\1\0\6\224\1\234"+
    "\6\224\2\74\1\226\1\74\1\224\1\227\2\224\1\74"+
    "\3\224\3\74\1\234\7\74\2\224\2\74\1\224\1\74"+
    "\1\0\2\74\4\236\1\0\6\236\1\235\6\236\2\74"+
    "\1\152\1\74\1\236\1\74\2\236\1\74\3\236\13\74"+
    "\2\236\2\74\1\236\1\74\1\0\2\74\4\237\1\0"+
    "\6\237\1\151\6\237\2\74\1\160\1\102\1\237\1\153"+
    "\2\237\1\74\3\237\13\74\2\237\2\74\1\237\1\162"+
    "\1\0\2\162\4\240\1\0\6\240\1\164\6\240\2\162"+
    "\1\241\1\162\1\240\1\162\2\240\1\162\3\240\13\162"+
    "\2\240\2\162\1\240\1\162\1\0\6\162\1\0\6\162"+
    "\1\164\10\162\1\241\31\162\4\0\4\21\1\0\6\21"+
    "\1\0\1\277\5\21\4\0\1\21\1\0\2\21\1\0"+
    "\3\21\13\0\2\21\2\0\1\21\17\0\1\243\46\0"+
    "\4\300\1\0\6\300\1\243\6\300\2\0\1\244\1\0"+
    "\1\300\1\0\2\300\1\0\3\300\13\0\2\300\2\0"+
    "\1\300\4\0\3\55\1\301\1\0\6\55\1\56\6\55"+
    "\2\0\1\112\1\0\1\55\1\0\2\55\1\60\3\55"+
    "\13\0\2\55\2\0\1\55\1\302\1\0\2\302\4\303"+
    "\1\0\6\303\1\304\6\303\4\302\1\303\1\302\2\303"+
    "\1\302\3\303\13\302\2\303\2\302\1\303\4\0\4\21"+
    "\1\0\5\21\1\305\1\0\6\21\4\0\1\21\1\0"+
    "\2\21\1\0\3\21\13\0\2\21\2\0\1\21\4\0"+
    "\3\21\1\306\1\0\6\21\1\0\6\21\4\0\1\21"+
    "\1\0\2\21\1\0\3\21\13\0\2\21\2\0\1\21"+
    "\1\307\1\0\2\307\4\310\1\0\6\310\1\311\6\310"+
    "\4\307\1\310\1\307\2\310\1\307\3\310\13\307\2\310"+
    "\2\307\1\310\1\252\1\0\6\252\1\0\51\252\4\0"+
    "\4\312\1\0\6\312\1\0\6\312\4\0\1\312\1\0"+
    "\2\312\1\0\3\312\13\0\2\312\2\0\1\312\1\130"+
    "\2\140\1\130\4\254\1\140\6\254\1\261\6\254\2\130"+
    "\1\313\1\256\1\254\1\314\2\254\1\130\3\254\1\140"+
    "\1\130\1\205\1\136\1\106\6\130\2\254\2\130\1\254"+
    "\1\130\1\217\1\315\1\130\4\316\1\217\6\316\1\221"+
    "\6\316\2\130\1\317\1\130\1\316\1\255\2\316\1\130"+
    "\3\316\1\315\3\130\1\106\6\130\2\316\2\130\1\316"+
    "\1\130\1\0\2\130\4\257\1\0\6\257\1\151\6\257"+
    "\2\130\1\207\1\256\1\257\1\210\2\257\1\130\3\257"+
    "\13\130\2\257\2\130\1\257\1\130\1\0\2\130\4\257"+
    "\1\0\6\257\1\235\6\257\2\130\1\207\1\130\1\257"+
    "\1\130\2\257\1\130\3\257\13\130\2\257\2\130\1\257"+
    "\1\130\1\0\2\130\4\260\1\0\6\260\1\151\6\260"+
    "\2\130\1\213\1\133\1\260\1\210\2\260\1\130\3\260"+
    "\13\130\2\260\2\130\1\260\1\74\1\140\1\141\1\74"+
    "\4\231\1\140\6\231\1\261\6\231\2\74\1\232\1\74"+
    "\1\231\1\233\2\231\1\74\3\231\1\141\1\74\1\143"+
    "\1\147\1\106\6\74\2\231\2\74\1\231\1\74\1\140"+
    "\1\141\1\74\4\320\1\140\6\320\1\321\6\320\2\74"+
    "\1\262\1\74\1\320\1\322\2\320\1\74\3\320\1\141"+
    "\1\74\1\143\1\105\1\106\6\74\2\320\2\74\1\320"+
    "\1\74\1\217\1\220\1\74\4\323\1\217\6\323\1\221"+
    "\6\323\2\74\1\152\1\74\1\323\1\263\2\323\1\74"+
    "\3\323\1\220\3\74\1\106\6\74\2\323\2\74\1\323"+
    "\1\74\1\217\1\220\1\74\4\264\1\217\6\264\1\221"+
    "\6\264\2\74\1\265\1\74\1\264\1\322\2\264\1\74"+
    "\3\264\1\220\3\74\1\106\6\74\2\264\2\74\1\264"+
    "\1\74\1\217\1\220\1\74\4\320\1\217\6\320\1\221"+
    "\6\320\2\74\1\265\1\74\1\320\1\322\2\320\1\74"+
    "\3\320\1\220\3\74\1\106\6\74\2\320\2\74\1\320"+
    "\1\74\1\217\1\220\1\74\4\224\1\217\6\224\1\270"+
    "\6\224\2\74\1\226\1\74\1\224\1\227\2\224\1\74"+
    "\3\224\1\220\2\74\1\234\1\106\6\74\2\224\2\74"+
    "\1\224\1\74\1\217\1\220\1\74\4\267\1\217\6\267"+
    "\1\270\6\267\2\74\1\271\1\74\1\267\1\275\2\267"+
    "\1\74\3\267\1\220\3\74\1\106\6\74\2\267\2\74"+
    "\1\267\1\74\1\217\1\220\1\74\4\273\1\217\6\273"+
    "\1\270\6\273\2\74\1\274\1\74\1\273\1\275\2\273"+
    "\1\74\3\273\1\220\3\74\1\106\6\74\2\273\2\74"+
    "\1\273\1\74\1\0\2\74\4\273\1\0\6\273\1\225"+
    "\6\273\2\74\1\271\1\74\1\273\1\275\2\273\1\74"+
    "\3\273\13\74\2\273\2\74\1\273\1\74\1\0\2\74"+
    "\4\324\1\0\6\324\1\225\6\324\2\74\1\271\1\74"+
    "\1\324\1\272\2\324\1\74\3\324\13\74\2\324\2\74"+
    "\1\324\1\74\1\0\2\74\4\273\1\0\6\273\1\127"+
    "\6\273\2\74\1\274\1\74\1\273\1\74\2\273\1\74"+
    "\3\273\13\74\2\273\2\74\1\273\1\74\1\0\6\74"+
    "\1\0\6\74\1\127\10\74\1\274\32\74\1\0\2\74"+
    "\4\273\1\0\6\273\1\127\6\273\2\74\1\274\1\74"+
    "\1\273\1\275\2\273\1\74\3\273\13\74\2\273\2\74"+
    "\1\273\1\74\1\0\2\74\4\276\1\0\6\276\1\225"+
    "\6\276\2\74\1\271\1\74\1\276\1\272\2\276\1\74"+
    "\3\276\13\74\2\276\2\74\1\276\4\0\4\300\1\0"+
    "\6\300\1\243\6\300\4\0\1\300\1\0\2\300\1\0"+
    "\3\300\13\0\2\300\2\0\1\300\1\302\1\0\6\302"+
    "\1\0\6\302\1\304\42\302\1\325\1\0\2\325\4\326"+
    "\1\0\6\326\1\327\6\326\4\325\1\326\1\325\2\326"+
    "\1\325\3\326\13\325\2\326\2\325\1\326\1\330\1\0"+
    "\2\330\4\331\1\0\6\331\1\332\6\331\4\330\1\331"+
    "\1\330\2\331\1\330\3\331\13\330\2\331\2\330\1\331"+
    "\1\307\1\0\6\307\1\0\6\307\1\311\42\307\4\0"+
    "\4\312\1\0\6\312\1\0\6\312\3\0\1\333\1\312"+
    "\1\334\2\312\1\0\3\312\13\0\2\312\2\0\1\312"+
    "\1\130\2\140\1\130\4\335\1\140\6\335\1\321\6\335"+
    "\2\130\1\313\1\130\1\335\1\336\2\335\1\130\3\335"+
    "\1\140\1\130\1\205\1\136\1\106\6\130\2\335\2\130"+
    "\1\335\1\130\1\217\1\315\1\130\4\337\1\217\6\337"+
    "\1\221\6\337\2\130\1\207\1\130\1\337\1\314\2\337"+
    "\1\130\3\337\1\315\3\130\1\106\6\130\2\337\2\130"+
    "\1\337\1\130\1\217\1\315\5\130\1\217\6\130\1\74"+
    "\22\130\1\315\3\130\1\106\14\130\1\217\1\315\1\130"+
    "\4\316\1\217\6\316\1\221\6\316\2\130\1\317\1\130"+
    "\1\316\1\336\2\316\1\130\3\316\1\315\3\130\1\106"+
    "\6\130\2\316\2\130\1\316\1\130\1\217\1\315\1\130"+
    "\4\335\1\217\6\335\1\221\6\335\2\130\1\317\1\130"+
    "\1\335\1\336\2\335\1\130\3\335\1\315\3\130\1\106"+
    "\6\130\2\335\2\130\1\335\1\74\1\217\1\220\1\74"+
    "\4\320\1\217\6\320\1\340\6\320\4\74\1\320\1\322"+
    "\2\320\1\74\3\320\1\220\3\74\1\106\6\74\2\320"+
    "\2\74\1\320\1\74\1\140\1\141\1\74\4\224\1\140"+
    "\6\224\1\341\6\224\2\74\1\226\1\74\1\224\1\227"+
    "\2\224\1\74\3\224\1\141\1\74\1\143\1\147\1\106"+
    "\6\74\2\224\2\74\1\224\1\74\1\217\1\220\1\74"+
    "\4\342\1\217\6\342\1\340\6\342\4\74\1\342\1\322"+
    "\2\342\1\74\3\342\1\220\3\74\1\106\6\74\2\342"+
    "\2\74\1\342\1\74\1\217\1\220\1\74\4\323\1\217"+
    "\6\323\1\221\6\323\2\74\1\152\1\74\1\323\1\74"+
    "\2\323\1\74\3\323\1\220\3\74\1\106\6\74\2\323"+
    "\2\74\1\323\1\74\1\0\2\74\4\324\1\0\6\324"+
    "\1\225\6\324\2\74\1\271\1\74\1\324\1\275\2\324"+
    "\1\74\3\324\13\74\2\324\2\74\1\324\1\325\1\0"+
    "\6\325\1\0\6\325\1\327\42\325\1\330\1\0\6\330"+
    "\1\0\6\330\1\332\42\330\17\0\1\343\46\0\4\344"+
    "\1\0\6\344\1\0\6\344\3\0\1\333\1\344\1\334"+
    "\2\344\1\0\3\344\13\0\2\344\2\0\1\344\1\130"+
    "\1\217\1\315\1\130\4\335\1\217\6\335\1\345\6\335"+
    "\4\130\1\335\1\336\2\335\1\130\3\335\1\315\3\130"+
    "\1\106\6\130\2\335\2\130\1\335\1\130\1\217\1\315"+
    "\1\130\4\346\1\217\6\346\1\345\6\346\4\130\1\346"+
    "\1\336\2\346\1\130\3\346\1\315\3\130\1\106\6\130"+
    "\2\346\2\130\1\346\1\130\1\217\1\315\1\130\4\337"+
    "\1\217\6\337\1\221\6\337\2\130\1\207\1\130\1\337"+
    "\1\130\2\337\1\130\3\337\1\315\3\130\1\106\6\130"+
    "\2\337\2\130\1\337\1\74\1\217\1\220\5\74\1\217"+
    "\6\74\1\340\22\74\1\220\3\74\1\106\14\74\1\140"+
    "\1\141\1\74\4\224\1\140\6\224\1\347\6\224\2\74"+
    "\1\226\1\74\1\224\1\227\2\224\1\74\3\224\1\141"+
    "\1\74\1\143\1\147\1\106\6\74\2\224\2\74\1\224"+
    "\1\74\1\217\1\220\1\74\4\342\1\217\6\342\1\340"+
    "\6\342\4\74\1\342\1\74\2\342\1\74\3\342\1\220"+
    "\3\74\1\106\6\74\2\342\2\74\1\342\4\0\4\344"+
    "\1\0\6\344\1\0\6\344\3\0\1\333\1\344\1\350"+
    "\2\344\1\0\3\344\13\0\2\344\2\0\1\344\1\130"+
    "\1\217\1\315\1\130\4\346\1\217\6\346\1\345\6\346"+
    "\4\130\1\346\1\130\2\346\1\130\3\346\1\315\3\130"+
    "\1\106\6\130\2\346\2\130\1\346\1\74\1\140\1\141"+
    "\1\74\4\273\1\140\6\273\1\347\6\273\2\74\1\274"+
    "\1\74\1\273\1\275\2\273\1\74\3\273\1\141\1\74"+
    "\1\143\1\105\1\106\6\74\2\273\2\74\1\273\4\0"+
    "\4\351\1\0\6\351\1\0\6\351\3\0\1\333\1\351"+
    "\1\350\2\351\1\0\3\351\13\0\2\351\2\0\1\351"+
    "\4\0\4\351\1\0\6\351\1\0\6\351\3\0\1\333"+
    "\1\351\1\0\2\351\1\0\3\351\13\0\2\351\2\0"+
    "\1\351";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10650];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\3\1\1\11\5\1\1\11\12\1\1\11"+
    "\1\1\4\0\1\1\3\0\7\1\1\0\4\1\1\0"+
    "\1\11\5\0\7\1\4\0\2\1\6\0\3\1\3\0"+
    "\1\1\2\0\10\1\14\0\4\1\1\0\1\1\12\0"+
    "\2\1\1\0\3\1\1\11\1\1\2\0\5\1\16\0"+
    "\7\1\1\0\5\1\2\0\5\1\1\0\5\1\6\0"+
    "\1\1\4\0\14\1\1\0\4\1\1\0\2\1\7\0"+
    "\1\1\2\0\1\1\1\0\2\1\1\0\2\1\5\0"+
    "\2\1\1\0\1\1\3\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  RythmLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin (YYINITIAL);return RythmTypes.TEXT;
            }
          case 20: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            }
          case 21: break;
          case 3: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_COMMENT;
            }
          case 22: break;
          case 4: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          case 23: break;
          case 5: 
            { return RythmTypes.NUMBER;
            }
          case 24: break;
          case 6: 
            { yybegin(YYINITIAL); return RythmTypes.TAG;
            }
          case 25: break;
          case 7: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_KEY;
            }
          case 26: break;
          case 8: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_METHOD;
            }
          case 27: break;
          case 9: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_IF;
            }
          case 28: break;
          case 10: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_FOR;
            }
          case 29: break;
          case 11: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_ARGS;
            }
          case 30: break;
          case 12: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_I_18_N;
            }
          case 31: break;
          case 13: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_ELSE;
            }
          case 32: break;
          case 14: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_RENDER;
            }
          case 33: break;
          case 15: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_INVOKE;
            }
          case 34: break;
          case 16: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_IMPORT;
            }
          case 35: break;
          case 17: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_PREFIX;
            }
          case 36: break;
          case 18: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_SECTION;
            }
          case 37: break;
          case 19: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_EXTENDS;
            }
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
