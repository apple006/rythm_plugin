/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.rythmplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.rythmplugin.psi.RythmTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Rythm.flex</tt>
 */
class RythmLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ST_ACTION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\10\2\1\22\0\1\2\1\44\1\31\3\0\1\46\1\0\1\30\1\17\4\0\1\33"+
    "\1\0\1\53\1\26\6\52\1\27\1\47\3\0\1\45\2\0\1\3\6\50\21\32\1\54\2\32\4\0\1"+
    "\36\1\0\1\4\1\51\1\12\1\21\1\11\1\34\1\6\1\35\1\14\1\35\1\25\1\41\1\22\1\16"+
    "\1\15\1\23\1\37\1\5\1\7\1\13\1\40\1\24\1\35\1\20\2\35\1\43\11\0\1\10\32\0"+
    "\1\42\337\0\1\42\177\0\13\42\35\0\2\10\5\0\1\42\57\0\1\42\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\1\2\2\1\3\2\2\1\4\1\2"+
    "\1\4\6\0\10\5\5\0\1\4\10\0\6\5\1\6"+
    "\2\5\2\0\1\7\4\0\1\4\10\0\6\5\2\0"+
    "\1\5\1\6\6\0\1\5\1\10\4\0\1\7\1\0"+
    "\1\11\5\0\1\12\1\0\5\5\6\0\3\6\1\0"+
    "\1\6\1\0\1\6\11\0\1\6\1\5\1\0\1\5"+
    "\1\10\1\0\1\13\1\7\10\0\5\5\1\6\5\0"+
    "\3\6\1\0\4\6\1\0\5\6\2\0\2\6\1\5"+
    "\2\7\1\0\1\14\2\0\1\15\1\16\1\0\1\17"+
    "\1\14\2\5\1\15\1\6\5\0\11\6\1\17\2\7"+
    "\1\0\1\20\1\21\2\0\1\5\1\20\1\21\1\5"+
    "\1\0\1\6\2\0\1\6\4\0\2\5\1\0\1\6"+
    "\1\0\1\12\1\0\2\6\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db"+
    "\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843"+
    "\0\u0870\0\u089d\0\264\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u0519"+
    "\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9"+
    "\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21"+
    "\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89"+
    "\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1"+
    "\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059"+
    "\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1"+
    "\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329"+
    "\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491"+
    "\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u0de3\0\u159f"+
    "\0\u15cc\0\264\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da"+
    "\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842"+
    "\0\u1167\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d"+
    "\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5"+
    "\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d"+
    "\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5"+
    "\0\u1de2\0\u1e0f\0\264\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0"+
    "\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058"+
    "\0\u2085\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166\0\u0357\0\u2193"+
    "\0\u089d\0\u1d2e\0\u21c0\0\u21ed\0\u1db5\0\u221a\0\u1e3c\0\u2247"+
    "\0\u2274\0\u1ec3\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355\0\u21c0"+
    "\0\u21ed\0\u2382\0\u23af\0\u2247\0\u2274\0\u23dc\0\u2409\0\u2436"+
    "\0\u2382\0\u2463\0\u23dc\0\u2490\0\u24bd\0\u24ea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\3\1\4\51\3\1\5\2\6\1\7\4\5\1\0"+
    "\1\10\14\5\2\11\3\5\1\12\13\5\1\11\2\5"+
    "\1\11\1\13\1\5\3\3\1\0\51\3\4\0\1\14"+
    "\1\15\1\0\1\16\1\0\1\17\2\0\1\20\6\0"+
    "\1\21\107\0\2\6\56\0\1\22\1\23\1\24\1\25"+
    "\1\0\1\26\2\24\1\27\2\24\1\0\3\24\1\30"+
    "\2\24\4\0\1\24\1\0\1\31\1\24\1\0\3\24"+
    "\6\0\2\24\2\0\1\24\41\0\1\32\41\0\2\11"+
    "\17\0\1\11\2\0\2\11\5\0\2\33\1\34\1\33"+
    "\1\0\1\35\5\33\1\0\6\33\4\0\1\33\1\0"+
    "\2\33\1\0\3\33\6\0\2\33\2\0\1\33\20\0"+
    "\1\36\5\0\1\37\23\0\2\37\1\36\5\0\1\40"+
    "\60\0\1\41\54\0\1\42\63\0\1\43\52\0\1\44"+
    "\3\0\1\45\3\0\1\46\33\0\1\47\53\0\1\24"+
    "\1\50\2\24\1\0\6\24\1\0\6\24\4\0\1\24"+
    "\1\0\2\24\1\0\3\24\6\0\2\24\2\0\1\24"+
    "\4\0\4\24\1\0\1\51\5\24\1\0\6\24\4\0"+
    "\1\24\1\0\2\24\1\0\3\24\6\0\2\24\2\0"+
    "\1\24\4\0\4\24\1\0\6\24\1\0\6\24\4\0"+
    "\1\24\1\0\2\24\1\0\3\24\6\0\2\24\2\0"+
    "\1\24\4\0\4\24\1\0\1\52\5\24\1\0\6\24"+
    "\4\0\1\24\1\0\2\24\1\0\3\24\6\0\2\24"+
    "\2\0\1\24\4\0\4\24\1\0\6\24\1\0\1\53"+
    "\5\24\4\0\1\24\1\0\2\24\1\0\3\24\6\0"+
    "\2\24\2\0\1\24\4\0\4\24\1\0\5\24\1\54"+
    "\1\0\2\24\1\55\3\24\1\46\3\0\1\24\1\0"+
    "\1\56\1\24\1\0\3\24\6\0\2\24\2\0\1\24"+
    "\4\0\1\24\1\57\2\24\1\0\6\24\1\0\6\24"+
    "\4\0\1\24\1\0\2\24\1\0\3\24\6\0\2\24"+
    "\2\0\1\24\4\0\4\24\1\0\4\24\1\60\1\24"+
    "\1\0\6\24\4\0\1\24\1\0\2\24\1\0\3\24"+
    "\6\0\2\24\2\0\1\24\7\0\1\61\51\0\4\62"+
    "\1\0\6\62\1\63\6\62\2\0\1\64\1\0\1\62"+
    "\1\0\2\62\1\65\3\62\6\0\2\62\2\0\1\62"+
    "\4\0\4\62\1\0\1\66\5\62\1\63\6\62\2\0"+
    "\1\64\1\0\1\62\1\0\2\62\1\65\3\62\6\0"+
    "\2\62\2\0\1\62\4\0\4\62\1\0\6\62\1\63"+
    "\6\62\2\0\1\64\1\0\1\62\1\0\2\62\1\65"+
    "\1\67\2\62\6\0\2\62\2\0\1\62\4\0\1\70"+
    "\4\0\2\70\6\0\1\70\4\0\2\70\4\0\1\70"+
    "\12\0\5\70\27\0\1\37\23\0\2\37\7\0\1\71"+
    "\64\0\1\72\50\0\1\73\55\0\1\74\65\0\1\75"+
    "\53\0\1\76\60\0\1\77\36\0\1\100\47\0\2\24"+
    "\1\101\1\24\1\0\6\24\1\0\6\24\4\0\1\24"+
    "\1\0\2\24\1\0\3\24\6\0\2\24\2\0\1\24"+
    "\4\0\4\24\1\0\5\24\1\102\1\0\6\24\4\0"+
    "\1\24\1\0\2\24\1\0\3\24\6\0\2\24\2\0"+
    "\1\24\4\0\4\24\1\0\1\24\1\103\4\24\1\0"+
    "\6\24\4\0\1\24\1\0\2\24\1\0\3\24\6\0"+
    "\2\24\2\0\1\24\4\0\4\24\1\0\2\24\1\104"+
    "\3\24\1\0\6\24\4\0\1\24\1\0\2\24\1\0"+
    "\3\24\6\0\2\24\2\0\1\24\4\0\4\24\1\0"+
    "\6\24\1\0\4\24\1\105\1\24\4\0\1\24\1\0"+
    "\2\24\1\0\3\24\6\0\2\24\2\0\1\24\4\0"+
    "\4\24\1\0\6\24\1\0\3\24\1\106\2\24\4\0"+
    "\1\24\1\0\2\24\1\0\3\24\6\0\2\24\2\0"+
    "\1\24\1\107\2\110\1\107\4\111\1\110\6\111\1\112"+
    "\6\111\2\107\1\113\1\114\1\111\1\115\2\111\1\107"+
    "\3\111\1\110\1\107\1\116\1\117\1\120\1\107\2\111"+
    "\2\107\1\111\4\0\4\24\1\0\1\121\5\24\1\0"+
    "\6\24\4\0\1\24\1\0\2\24\1\0\3\24\6\0"+
    "\2\24\2\0\1\24\4\0\1\24\1\122\2\24\1\0"+
    "\6\24\1\0\6\24\4\0\1\24\1\0\2\24\1\0"+
    "\3\24\6\0\2\24\2\0\1\24\11\0\1\123\47\0"+
    "\4\62\1\0\6\62\1\63\6\62\2\0\1\124\1\0"+
    "\1\62\1\0\2\62\1\65\3\62\6\0\2\62\2\0"+
    "\1\62\4\0\4\125\1\0\6\125\1\63\6\125\2\0"+
    "\1\64\1\0\1\125\1\0\2\125\1\0\3\125\6\0"+
    "\2\125\2\0\1\125\17\0\1\63\10\0\1\124\1\0"+
    "\1\126\3\0\1\65\11\0\1\126\3\0\1\126\4\0"+
    "\4\62\1\0\2\62\1\127\3\62\1\63\6\62\2\0"+
    "\1\124\1\0\1\62\1\0\2\62\1\65\3\62\6\0"+
    "\2\62\2\0\1\62\4\0\4\62\1\0\6\62\1\63"+
    "\6\62\2\0\1\124\1\0\1\62\1\0\2\62\1\65"+
    "\1\62\1\130\1\62\6\0\2\62\2\0\1\62\7\0"+
    "\1\131\66\0\1\132\46\0\1\133\52\0\1\134\60\0"+
    "\1\135\54\0\1\136\55\0\1\137\72\0\1\140\24\0"+
    "\3\24\1\131\1\0\6\24\1\0\6\24\4\0\1\24"+
    "\1\0\2\24\1\0\3\24\6\0\2\24\2\0\1\24"+
    "\4\0\4\24\1\0\6\24\1\0\1\24\1\141\4\24"+
    "\4\0\1\24\1\0\2\24\1\0\3\24\6\0\2\24"+
    "\2\0\1\24\4\0\4\24\1\0\2\24\1\142\3\24"+
    "\1\0\6\24\4\0\1\24\1\0\2\24\1\0\3\24"+
    "\6\0\2\24\2\0\1\24\4\0\4\24\1\0\1\143"+
    "\5\24\1\0\6\24\4\0\1\24\1\0\2\24\1\0"+
    "\3\24\6\0\2\24\2\0\1\24\4\0\4\24\1\0"+
    "\4\24\1\144\1\24\1\0\6\24\4\0\1\24\1\0"+
    "\2\24\1\0\3\24\6\0\2\24\2\0\1\24\4\0"+
    "\4\24\1\0\4\24\1\145\1\24\1\0\6\24\4\0"+
    "\1\24\1\0\2\24\1\0\3\24\6\0\2\24\2\0"+
    "\1\24\1\107\1\0\6\107\1\0\6\107\1\146\36\107"+
    "\2\110\1\107\4\147\1\110\6\147\1\112\6\147\2\107"+
    "\1\113\1\114\1\147\1\115\2\147\1\107\3\147\1\110"+
    "\1\107\1\116\1\117\1\120\1\107\2\147\2\107\1\147"+
    "\1\107\2\150\1\107\4\111\1\150\6\111\1\112\6\111"+
    "\2\107\1\151\1\114\1\111\1\115\2\111\1\107\3\111"+
    "\1\150\1\107\1\152\1\117\1\120\1\107\2\111\2\107"+
    "\1\111\1\146\1\150\1\153\1\146\4\154\1\150\6\154"+
    "\1\112\6\154\2\146\1\155\1\146\1\154\1\156\2\154"+
    "\1\146\3\154\1\153\1\146\1\157\1\160\1\120\1\146"+
    "\2\154\2\146\1\154\1\107\2\150\1\107\4\147\1\150"+
    "\6\147\1\112\6\147\2\107\1\113\1\114\1\147\1\115"+
    "\2\147\1\107\3\147\1\150\1\107\1\116\1\117\1\120"+
    "\1\107\2\147\2\107\1\147\1\107\1\0\2\107\4\161"+
    "\1\0\6\161\1\162\6\161\2\107\1\163\1\114\1\161"+
    "\1\164\2\161\1\107\3\161\6\107\2\161\2\107\1\161"+
    "\1\107\2\150\1\107\4\165\1\150\6\165\1\112\6\165"+
    "\2\107\1\151\1\114\1\165\1\115\2\165\1\107\3\165"+
    "\1\150\1\107\1\152\1\117\1\120\1\107\2\165\2\107"+
    "\1\165\1\107\2\166\1\107\4\167\1\166\6\167\1\162"+
    "\6\167\2\107\1\170\1\114\1\167\1\171\2\167\1\107"+
    "\3\167\1\166\1\107\1\116\1\117\2\107\2\167\2\107"+
    "\1\167\1\107\2\166\5\107\1\166\6\107\1\146\22\107"+
    "\1\166\2\107\1\117\7\107\1\172\2\173\5\172\1\173"+
    "\6\172\1\174\22\172\1\173\3\172\1\120\6\172\4\0"+
    "\4\24\1\0\6\24\1\0\6\24\4\0\1\24\1\0"+
    "\1\175\1\24\1\0\3\24\6\0\2\24\2\0\1\24"+
    "\1\176\1\0\2\176\4\177\1\0\6\177\1\200\6\177"+
    "\4\176\1\177\1\176\2\177\1\176\3\177\6\176\2\177"+
    "\2\176\1\177\1\0\2\201\5\0\1\201\31\0\1\201"+
    "\1\202\30\0\1\63\10\0\1\124\30\0\4\125\1\0"+
    "\6\125\1\63\6\125\4\0\1\125\1\0\2\125\1\0"+
    "\3\125\6\0\2\125\2\0\1\125\17\0\1\63\10\0"+
    "\1\124\1\0\1\126\15\0\1\126\3\0\1\126\4\0"+
    "\4\203\1\0\6\203\1\63\6\203\2\0\1\124\1\0"+
    "\1\203\1\0\2\203\1\65\3\203\6\0\2\203\2\0"+
    "\1\203\4\0\1\204\3\62\1\0\6\62\1\63\6\62"+
    "\2\0\1\124\1\0\1\62\1\0\2\62\1\65\3\62"+
    "\6\0\2\62\2\0\1\62\1\131\1\0\6\131\1\0"+
    "\44\131\11\0\1\205\57\0\1\206\56\0\1\207\63\0"+
    "\1\210\34\0\1\211\77\0\1\212\40\0\1\213\44\0"+
    "\4\24\1\0\1\214\5\24\1\0\6\24\4\0\1\24"+
    "\1\0\2\24\1\0\3\24\6\0\2\24\2\0\1\24"+
    "\4\0\4\24\1\0\3\24\1\215\2\24\1\0\6\24"+
    "\4\0\1\24\1\0\2\24\1\0\3\24\6\0\2\24"+
    "\2\0\1\24\4\0\4\24\1\0\5\24\1\216\1\0"+
    "\6\24\4\0\1\24\1\0\2\24\1\0\3\24\6\0"+
    "\2\24\2\0\1\24\4\0\4\24\1\0\6\24\1\0"+
    "\5\24\1\217\4\0\1\24\1\0\2\24\1\0\3\24"+
    "\6\0\2\24\2\0\1\24\4\0\1\24\1\220\2\24"+
    "\1\0\6\24\1\0\6\24\4\0\1\24\1\0\2\24"+
    "\1\0\3\24\6\0\2\24\2\0\1\24\1\146\1\0"+
    "\6\146\1\0\6\146\1\221\35\146\1\107\2\150\1\107"+
    "\4\147\1\150\6\147\1\112\6\147\2\107\1\151\1\114"+
    "\1\147\1\115\2\147\1\107\3\147\1\150\1\107\1\152"+
    "\1\117\1\120\1\107\2\147\2\107\1\147\1\107\2\150"+
    "\5\107\1\150\6\107\1\146\22\107\1\150\1\107\1\152"+
    "\1\117\1\120\7\107\2\150\1\107\4\222\1\150\6\222"+
    "\1\112\6\222\2\107\1\151\1\114\1\222\1\223\2\222"+
    "\1\107\3\222\1\150\1\107\1\152\1\117\1\120\1\107"+
    "\2\222\2\107\1\222\1\107\2\166\5\107\1\166\6\107"+
    "\1\146\22\107\1\166\1\107\1\152\1\117\7\107\1\146"+
    "\1\150\1\153\5\146\1\150\6\146\1\221\22\146\1\153"+
    "\1\146\1\157\1\224\1\120\7\146\1\225\1\226\1\146"+
    "\4\154\1\225\6\154\1\227\6\154\2\146\1\155\1\146"+
    "\1\154\1\230\2\154\1\146\3\154\1\226\3\146\1\120"+
    "\1\146\2\154\2\146\1\154\1\146\1\225\1\226\1\146"+
    "\4\231\1\225\6\231\1\227\6\231\2\146\1\155\1\146"+
    "\1\231\1\230\2\231\1\146\3\231\1\226\3\146\1\120"+
    "\1\146\2\231\2\146\1\231\1\146\1\225\1\226\1\146"+
    "\4\154\1\225\6\154\1\227\6\154\2\146\1\155\1\146"+
    "\1\154\1\156\2\154\1\146\3\154\1\226\3\146\1\120"+
    "\1\146\2\154\2\146\1\154\1\146\1\166\1\232\5\146"+
    "\1\166\6\146\1\221\22\146\1\232\1\146\1\157\1\224"+
    "\10\146\1\166\1\232\1\146\4\233\1\166\6\233\1\234"+
    "\6\233\2\146\1\235\1\146\1\233\1\236\2\233\1\146"+
    "\3\233\1\232\2\146\1\160\2\146\2\233\2\146\1\233"+
    "\1\107\1\0\2\107\4\161\1\0\6\161\1\162\6\161"+
    "\2\107\1\163\1\237\1\161\1\164\2\161\1\107\3\161"+
    "\6\107\2\161\2\107\1\161\1\146\1\0\2\146\4\240"+
    "\1\0\6\240\1\162\6\240\2\146\1\241\1\146\1\240"+
    "\1\242\2\240\1\146\3\240\3\146\1\243\2\146\2\240"+
    "\2\146\1\240\1\107\1\0\6\107\1\0\6\107\1\244"+
    "\10\107\1\163\25\107\1\0\2\107\4\245\1\0\6\245"+
    "\1\244\6\245\2\107\1\163\1\107\1\245\1\164\2\245"+
    "\1\107\3\245\6\107\2\245\2\107\1\245\1\107\2\150"+
    "\1\107\4\165\1\150\6\165\1\112\6\165\2\107\1\151"+
    "\1\114\1\165\1\223\2\165\1\107\3\165\1\150\1\107"+
    "\1\152\1\117\1\120\1\107\2\165\2\107\1\165\1\107"+
    "\2\166\5\107\1\166\6\107\1\146\22\107\1\166\13\107"+
    "\1\0\2\107\4\167\1\0\6\167\1\162\6\167\2\107"+
    "\1\170\1\114\1\167\1\171\2\167\1\107\3\167\6\107"+
    "\2\167\2\107\1\167\1\107\1\0\2\107\4\161\1\0"+
    "\6\161\1\162\6\161\2\107\1\170\1\114\1\161\1\164"+
    "\2\161\1\107\3\161\6\107\2\161\2\107\1\161\1\107"+
    "\1\0\2\107\4\246\1\0\6\246\1\162\6\246\2\107"+
    "\1\170\1\114\1\246\1\171\2\246\1\107\3\246\6\107"+
    "\2\246\2\107\1\246\1\172\1\0\6\172\1\0\6\172"+
    "\1\174\36\172\2\173\5\172\1\173\6\172\1\174\22\172"+
    "\1\173\13\172\1\0\2\172\4\247\1\0\6\247\1\174"+
    "\6\247\2\172\1\250\1\172\1\247\1\174\2\247\1\172"+
    "\3\247\6\172\2\247\2\172\1\247\4\0\4\24\1\0"+
    "\3\24\1\251\2\24\1\0\6\24\4\0\1\24\1\0"+
    "\2\24\1\0\3\24\6\0\2\24\2\0\1\24\1\176"+
    "\1\0\6\176\1\0\6\176\1\200\35\176\43\0\1\202"+
    "\15\0\4\203\1\0\6\203\1\252\6\203\2\0\1\253"+
    "\1\0\1\203\1\0\2\203\1\65\3\203\6\0\2\203"+
    "\2\0\1\203\4\0\4\62\1\0\6\62\1\63\6\62"+
    "\2\0\1\124\1\0\1\62\1\0\2\62\1\65\2\62"+
    "\1\254\6\0\2\62\2\0\1\62\5\0\1\255\64\0"+
    "\1\256\60\0\1\257\44\0\1\260\56\0\1\261\72\0"+
    "\1\262\43\0\1\263\40\0\1\24\1\264\2\24\1\0"+
    "\6\24\1\0\6\24\4\0\1\24\1\0\2\24\1\0"+
    "\3\24\6\0\2\24\2\0\1\24\4\0\4\24\1\0"+
    "\4\24\1\265\1\24\1\0\6\24\4\0\1\24\1\0"+
    "\2\24\1\0\3\24\6\0\2\24\2\0\1\24\4\0"+
    "\4\24\1\0\6\24\1\0\1\24\1\266\4\24\4\0"+
    "\1\24\1\0\2\24\1\0\3\24\6\0\2\24\2\0"+
    "\1\24\4\0\4\24\1\0\1\267\5\24\1\0\6\24"+
    "\4\0\1\24\1\0\2\24\1\0\3\24\6\0\2\24"+
    "\2\0\1\24\4\0\4\24\1\0\2\24\1\261\3\24"+
    "\1\0\6\24\4\0\1\24\1\0\2\24\1\0\3\24"+
    "\6\0\2\24\2\0\1\24\1\107\2\150\1\107\4\222"+
    "\1\150\6\222\1\270\6\222\2\107\1\271\1\237\1\222"+
    "\1\272\2\222\1\107\3\222\1\150\1\107\1\152\1\117"+
    "\1\120\1\107\2\222\2\107\1\222\1\107\1\225\1\273"+
    "\1\107\4\274\1\225\6\274\1\227\6\274\2\107\1\275"+
    "\1\107\1\274\1\223\2\274\1\107\3\274\1\273\3\107"+
    "\1\120\1\107\2\274\2\107\1\274\1\146\1\166\1\232"+
    "\5\146\1\166\6\146\1\221\22\146\1\232\2\146\1\224"+
    "\7\146\1\0\2\225\5\0\1\225\31\0\1\225\3\0"+
    "\1\120\6\0\1\146\1\225\1\226\5\146\1\225\6\146"+
    "\1\221\22\146\1\226\3\146\1\120\7\146\1\225\1\226"+
    "\1\146\4\233\1\225\6\233\1\276\6\233\2\146\1\235"+
    "\1\146\1\233\1\236\2\233\1\146\3\233\1\226\2\146"+
    "\1\243\1\120\1\146\2\233\2\146\1\233\1\146\1\225"+
    "\1\226\1\146\4\277\1\225\6\277\1\300\6\277\2\146"+
    "\1\301\1\146\1\277\1\230\2\277\1\146\3\277\1\226"+
    "\3\146\1\120\1\146\2\277\2\146\1\277\1\146\1\225"+
    "\1\226\1\146\4\231\1\225\6\231\1\300\6\231\2\146"+
    "\1\301\1\146\1\231\1\230\2\231\1\146\3\231\1\226"+
    "\3\146\1\120\1\146\2\231\2\146\1\231\1\146\1\166"+
    "\1\232\5\146\1\166\6\146\1\221\22\146\1\232\13\146"+
    "\1\0\2\146\4\233\1\0\6\233\1\234\6\233\2\146"+
    "\1\235\1\146\1\233\1\302\2\233\1\146\3\233\6\146"+
    "\2\233\2\146\1\233\1\146\1\0\2\146\4\303\1\0"+
    "\6\303\1\234\6\303\2\146\1\304\1\146\1\303\1\305"+
    "\2\303\1\146\3\303\6\146\2\303\2\146\1\303\1\146"+
    "\1\0\2\146\4\306\1\0\6\306\1\234\6\306\2\146"+
    "\1\235\1\146\1\306\1\302\2\306\1\146\3\306\6\146"+
    "\2\306\2\146\1\306\1\146\1\0\2\146\4\233\1\0"+
    "\6\233\1\234\6\233\2\146\1\235\1\146\1\233\1\236"+
    "\2\233\1\146\3\233\6\146\2\233\2\146\1\233\1\107"+
    "\1\0\2\107\4\245\1\0\6\245\1\162\6\245\2\107"+
    "\1\163\1\237\1\245\1\164\2\245\1\107\3\245\6\107"+
    "\2\245\2\107\1\245\1\146\1\0\2\146\4\240\1\0"+
    "\6\240\1\244\6\240\2\146\1\241\1\146\1\240\1\302"+
    "\2\240\1\146\3\240\6\146\2\240\2\146\1\240\1\146"+
    "\1\0\2\146\4\306\1\0\6\306\1\244\6\306\2\146"+
    "\1\241\1\146\1\306\1\302\2\306\1\146\3\306\6\146"+
    "\2\306\2\146\1\306\1\146\1\0\2\146\4\240\1\0"+
    "\6\240\1\244\6\240\2\146\1\241\1\146\1\240\1\242"+
    "\2\240\1\146\3\240\6\146\2\240\2\146\1\240\1\146"+
    "\1\0\2\146\4\233\1\0\6\233\1\234\6\233\2\146"+
    "\1\235\1\146\1\233\1\236\2\233\1\146\3\233\3\146"+
    "\1\243\2\146\2\233\2\146\1\233\1\146\1\0\2\146"+
    "\4\233\1\0\6\233\1\243\6\233\2\146\1\235\1\146"+
    "\1\233\1\236\2\233\1\146\3\233\3\146\1\243\2\146"+
    "\2\233\2\146\1\233\1\107\1\0\2\107\4\245\1\0"+
    "\6\245\1\244\6\245\2\107\1\163\1\107\1\245\1\107"+
    "\2\245\1\107\3\245\6\107\2\245\2\107\1\245\1\107"+
    "\1\0\2\107\4\246\1\0\6\246\1\162\6\246\2\107"+
    "\1\170\1\114\1\246\1\164\2\246\1\107\3\246\6\107"+
    "\2\246\2\107\1\246\1\172\1\0\2\172\4\247\1\0"+
    "\6\247\1\174\6\247\2\172\1\250\1\172\1\247\1\172"+
    "\2\247\1\172\3\247\6\172\2\247\2\172\1\247\1\172"+
    "\1\0\6\172\1\0\6\172\1\174\10\172\1\250\24\172"+
    "\4\0\4\24\1\0\6\24\1\0\1\307\5\24\4\0"+
    "\1\24\1\0\2\24\1\0\3\24\6\0\2\24\2\0"+
    "\1\24\17\0\1\252\41\0\4\310\1\0\6\310\1\252"+
    "\6\310\2\0\1\253\1\0\1\310\1\0\2\310\1\0"+
    "\3\310\6\0\2\310\2\0\1\310\4\0\3\62\1\311"+
    "\1\0\6\62\1\63\6\62\2\0\1\124\1\0\1\62"+
    "\1\0\2\62\1\65\3\62\6\0\2\62\2\0\1\62"+
    "\1\312\1\0\6\312\1\0\6\312\1\255\35\312\16\0"+
    "\1\313\45\0\1\314\45\0\1\315\1\0\6\315\1\0"+
    "\6\315\1\260\35\315\1\261\1\0\6\261\1\0\44\261"+
    "\4\0\4\316\1\0\6\316\1\0\6\316\4\0\1\316"+
    "\1\0\2\316\1\0\3\316\6\0\2\316\2\0\1\316"+
    "\1\312\1\0\2\312\4\317\1\0\6\317\1\255\6\317"+
    "\4\312\1\317\1\312\2\317\1\312\3\317\6\312\2\317"+
    "\2\312\1\317\4\0\4\24\1\0\5\24\1\320\1\0"+
    "\6\24\4\0\1\24\1\0\2\24\1\0\3\24\6\0"+
    "\2\24\2\0\1\24\4\0\3\24\1\321\1\0\6\24"+
    "\1\0\6\24\4\0\1\24\1\0\2\24\1\0\3\24"+
    "\6\0\2\24\2\0\1\24\1\315\1\0\2\315\4\322"+
    "\1\0\6\322\1\260\6\322\4\315\1\322\1\315\2\322"+
    "\1\315\3\322\6\315\2\322\2\315\1\322\1\146\1\150"+
    "\1\153\1\146\4\240\1\150\6\240\1\270\6\240\2\146"+
    "\1\241\1\146\1\240\1\242\2\240\1\146\3\240\1\153"+
    "\1\146\1\157\1\160\1\120\1\146\2\240\2\146\1\240"+
    "\1\107\2\150\1\107\4\323\1\150\6\323\1\324\6\323"+
    "\2\107\1\271\1\107\1\323\1\325\2\323\1\107\3\323"+
    "\1\150\1\107\1\152\1\117\1\120\1\107\2\323\2\107"+
    "\1\323\1\107\1\225\1\273\1\107\4\326\1\225\6\326"+
    "\1\227\6\326\2\107\1\163\1\107\1\326\1\272\2\326"+
    "\1\107\3\326\1\273\3\107\1\120\1\107\2\326\2\107"+
    "\1\326\1\107\1\225\1\273\5\107\1\225\6\107\1\146"+
    "\22\107\1\273\3\107\1\120\7\107\1\225\1\273\1\107"+
    "\4\274\1\225\6\274\1\227\6\274\2\107\1\275\1\107"+
    "\1\274\1\325\2\274\1\107\3\274\1\273\3\107\1\120"+
    "\1\107\2\274\2\107\1\274\1\107\1\225\1\273\1\107"+
    "\4\323\1\225\6\323\1\227\6\323\2\107\1\275\1\107"+
    "\1\323\1\325\2\323\1\107\3\323\1\273\3\107\1\120"+
    "\1\107\2\323\2\107\1\323\1\146\1\225\1\226\1\146"+
    "\4\233\1\225\6\233\1\300\6\233\2\146\1\235\1\146"+
    "\1\233\1\236\2\233\1\146\3\233\1\226\2\146\1\243"+
    "\1\120\1\146\2\233\2\146\1\233\1\146\1\225\1\226"+
    "\1\146\4\277\1\225\6\277\1\300\6\277\2\146\1\301"+
    "\1\146\1\277\1\305\2\277\1\146\3\277\1\226\3\146"+
    "\1\120\1\146\2\277\2\146\1\277\1\146\1\225\1\226"+
    "\1\146\4\303\1\225\6\303\1\300\6\303\2\146\1\304"+
    "\1\146\1\303\1\305\2\303\1\146\3\303\1\226\3\146"+
    "\1\120\1\146\2\303\2\146\1\303\1\146\1\0\2\146"+
    "\4\303\1\0\6\303\1\234\6\303\2\146\1\301\1\146"+
    "\1\303\1\305\2\303\1\146\3\303\6\146\2\303\2\146"+
    "\1\303\1\146\1\0\2\146\4\327\1\0\6\327\1\234"+
    "\6\327\2\146\1\301\1\146\1\327\1\302\2\327\1\146"+
    "\3\327\6\146\2\327\2\146\1\327\1\146\1\0\2\146"+
    "\4\303\1\0\6\303\1\221\6\303\2\146\1\304\1\146"+
    "\1\303\1\146\2\303\1\146\3\303\6\146\2\303\2\146"+
    "\1\303\1\146\1\0\6\146\1\0\6\146\1\221\10\146"+
    "\1\304\25\146\1\0\2\146\4\303\1\0\6\303\1\221"+
    "\6\303\2\146\1\304\1\146\1\303\1\305\2\303\1\146"+
    "\3\303\6\146\2\303\2\146\1\303\1\146\1\0\2\146"+
    "\4\306\1\0\6\306\1\234\6\306\2\146\1\301\1\146"+
    "\1\306\1\302\2\306\1\146\3\306\6\146\2\306\2\146"+
    "\1\306\4\0\4\310\1\0\6\310\1\252\6\310\4\0"+
    "\1\310\1\0\2\310\1\0\3\310\6\0\2\310\2\0"+
    "\1\310\1\330\1\0\6\330\1\0\6\330\1\313\35\330"+
    "\1\331\1\0\6\331\1\0\6\331\1\314\35\331\4\0"+
    "\4\316\1\0\6\316\1\0\6\316\3\0\1\332\1\316"+
    "\1\333\2\316\1\0\3\316\6\0\2\316\2\0\1\316"+
    "\1\330\1\0\2\330\4\334\1\0\6\334\1\313\6\334"+
    "\4\330\1\334\1\330\2\334\1\330\3\334\6\330\2\334"+
    "\2\330\1\334\1\331\1\0\2\331\4\335\1\0\6\335"+
    "\1\314\6\335\4\331\1\335\1\331\2\335\1\331\3\335"+
    "\6\331\2\335\2\331\1\335\1\107\1\225\1\273\1\107"+
    "\4\323\1\225\6\323\1\336\6\323\4\107\1\323\1\325"+
    "\2\323\1\107\3\323\1\273\3\107\1\120\1\107\2\323"+
    "\2\107\1\323\1\146\1\150\1\153\1\146\4\233\1\150"+
    "\6\233\1\337\6\233\2\146\1\235\1\146\1\233\1\236"+
    "\2\233\1\146\3\233\1\153\1\146\1\157\1\160\1\120"+
    "\1\146\2\233\2\146\1\233\1\107\1\225\1\273\1\107"+
    "\4\340\1\225\6\340\1\336\6\340\4\107\1\340\1\325"+
    "\2\340\1\107\3\340\1\273\3\107\1\120\1\107\2\340"+
    "\2\107\1\340\1\107\1\225\1\273\1\107\4\326\1\225"+
    "\6\326\1\227\6\326\2\107\1\163\1\107\1\326\1\107"+
    "\2\326\1\107\3\326\1\273\3\107\1\120\1\107\2\326"+
    "\2\107\1\326\1\146\1\0\2\146\4\327\1\0\6\327"+
    "\1\234\6\327\2\146\1\301\1\146\1\327\1\305\2\327"+
    "\1\146\3\327\6\146\2\327\2\146\1\327\17\0\1\341"+
    "\41\0\4\342\1\0\6\342\1\0\6\342\3\0\1\332"+
    "\1\342\1\333\2\342\1\0\3\342\6\0\2\342\2\0"+
    "\1\342\1\146\1\225\1\226\5\146\1\225\6\146\1\343"+
    "\22\146\1\226\3\146\1\120\7\146\1\150\1\153\1\146"+
    "\4\233\1\150\6\233\1\344\6\233\2\146\1\235\1\146"+
    "\1\233\1\236\2\233\1\146\3\233\1\153\1\146\1\157"+
    "\1\160\1\120\1\146\2\233\2\146\1\233\1\107\1\225"+
    "\1\273\1\107\4\340\1\225\6\340\1\336\6\340\4\107"+
    "\1\340\1\107\2\340\1\107\3\340\1\273\3\107\1\120"+
    "\1\107\2\340\2\107\1\340\4\0\4\342\1\0\6\342"+
    "\1\0\6\342\3\0\1\332\1\342\1\345\2\342\1\0"+
    "\3\342\6\0\2\342\2\0\1\342\1\146\1\150\1\153"+
    "\1\146\4\303\1\150\6\303\1\344\6\303\2\146\1\304"+
    "\1\146\1\303\1\305\2\303\1\146\3\303\1\153\1\146"+
    "\1\157\1\224\1\120\1\146\2\303\2\146\1\303\4\0"+
    "\4\346\1\0\6\346\1\0\6\346\3\0\1\332\1\346"+
    "\1\345\2\346\1\0\3\346\6\0\2\346\2\0\1\346"+
    "\4\0\4\346\1\0\6\346\1\0\6\346\3\0\1\332"+
    "\1\346\1\0\2\346\1\0\3\346\6\0\2\346\2\0"+
    "\1\346";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9495];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\2\1\1\11\6\1\6\0\10\1\5\0"+
    "\1\1\10\0\11\1\2\0\1\11\4\0\1\1\10\0"+
    "\6\1\2\0\2\1\6\0\2\1\4\0\1\1\1\0"+
    "\1\1\5\0\1\1\1\0\5\1\6\0\3\1\1\0"+
    "\1\1\1\0\1\1\11\0\2\1\1\0\2\1\1\0"+
    "\1\11\1\1\10\0\6\1\5\0\3\1\1\0\4\1"+
    "\1\0\5\1\2\0\5\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\11\5\1\5\0\14\1\1\0\2\1\2\0"+
    "\4\1\1\0\1\1\2\0\1\1\4\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  RythmLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin (YYINITIAL);return RythmTypes.TEXT;
            }
          case 18: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            }
          case 19: break;
          case 3: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          case 20: break;
          case 4: 
            { return RythmTypes.NUMBER;
            }
          case 21: break;
          case 5: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_KEY;
            }
          case 22: break;
          case 6: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_IF;
            }
          case 23: break;
          case 7: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_METHOD;
            }
          case 24: break;
          case 8: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_FOR;
            }
          case 25: break;
          case 9: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_ARGS;
            }
          case 26: break;
          case 10: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_I_18_N;
            }
          case 27: break;
          case 11: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_ELSE;
            }
          case 28: break;
          case 12: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_RENDER;
            }
          case 29: break;
          case 13: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_INVOKE;
            }
          case 30: break;
          case 14: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_IMPORT;
            }
          case 31: break;
          case 15: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_PREFIX;
            }
          case 32: break;
          case 16: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_SECTION;
            }
          case 33: break;
          case 17: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_EXTENDS;
            }
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
