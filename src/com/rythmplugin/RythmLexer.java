/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.rythmplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.rythmplugin.psi.RythmTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Rythm.flex</tt>
 */
class RythmLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ST_ACTION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\10\2\1\22\0\1\2\1\44\1\31\3\0\1\46\1\0\1\30\1\17\4\0\1\33"+
    "\1\0\1\54\1\26\6\53\1\27\1\47\3\0\1\45\2\0\1\3\6\51\21\32\1\55\2\32\4\0\1"+
    "\36\1\0\1\4\1\52\1\12\1\21\1\11\1\34\1\6\1\35\1\14\1\35\1\25\1\41\1\22\1\16"+
    "\1\15\1\23\1\37\1\5\1\7\1\13\1\40\1\24\1\35\1\20\2\35\1\43\1\0\1\50\7\0\1"+
    "\10\32\0\1\42\337\0\1\42\177\0\13\42\35\0\2\10\5\0\1\42\57\0\1\42\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\1\1\2\1\1\2\2\1\3\1\2"+
    "\2\4\10\5\1\1\5\0\1\4\6\5\1\0\3\5"+
    "\1\1\1\0\1\6\5\0\1\4\6\5\4\0\1\5"+
    "\1\7\6\0\1\5\1\10\1\1\3\0\1\6\2\0"+
    "\1\11\5\5\1\12\1\7\14\0\4\7\1\0\1\7"+
    "\12\0\1\7\1\5\1\0\1\5\1\10\1\1\1\13"+
    "\1\6\2\0\5\5\16\0\7\7\1\0\5\7\2\0"+
    "\2\7\1\5\2\6\1\0\1\14\2\5\1\15\1\16"+
    "\6\0\1\7\4\0\11\7\1\17\2\6\1\0\1\5"+
    "\1\14\1\20\1\21\1\0\1\5\1\15\7\0\1\7"+
    "\2\0\1\7\1\0\1\5\1\20\1\0\1\5\1\21"+
    "\5\0\2\7\1\0\1\12\3\0\1\7\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592"+
    "\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\346\0\u06d4"+
    "\0\u0702\0\u0730\0\u075e\0\u078c\0\u0450\0\u07ba\0\u07e8\0\u0816"+
    "\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6"+
    "\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66"+
    "\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u08fc"+
    "\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18"+
    "\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088"+
    "\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8"+
    "\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u0b24"+
    "\0\u133a\0\u1368\0\346\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e"+
    "\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590\0\u15be"+
    "\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e"+
    "\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e"+
    "\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e"+
    "\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e"+
    "\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0\0\u1cee"+
    "\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e"+
    "\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u0256"+
    "\0\u1fce\0\u06a6\0\u1ffc\0\u1b50\0\u1ffc\0\u202a\0\u2058\0\u2086"+
    "\0\u1bda\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a"+
    "\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280\0\u22ae\0\u202a\0\u22ae"+
    "\0\u22dc\0\u2058\0\u22dc\0\u230a\0\u2338\0\u2366\0\u2394\0\u23c2"+
    "\0\u23f0\0\u241e\0\u244c\0\u230a\0\u247a\0\u23f0\0\u24a8\0\u24d6"+
    "\0\u2504\0\u2532";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\3\1\4\5\3\1\5\5\3\1\6\10\3\1\6"+
    "\2\3\1\7\7\3\1\6\4\3\1\6\5\3\1\6"+
    "\2\10\1\4\4\6\1\0\1\11\14\6\2\12\3\6"+
    "\1\7\13\6\1\12\3\6\1\12\1\13\1\6\3\3"+
    "\1\0\13\3\1\0\10\3\1\0\2\3\1\0\7\3"+
    "\1\0\4\3\1\0\5\3\4\0\1\14\1\15\1\16"+
    "\1\17\1\0\1\20\2\16\1\21\2\16\1\0\3\16"+
    "\1\22\2\16\4\0\1\16\1\0\1\23\1\16\1\0"+
    "\3\16\7\0\2\16\2\0\1\16\3\3\1\0\13\3"+
    "\1\0\10\3\1\0\2\3\1\0\5\3\1\24\1\3"+
    "\1\0\4\3\1\0\5\3\62\0\2\25\1\26\1\25"+
    "\1\0\1\27\5\25\1\0\6\25\4\0\1\25\1\0"+
    "\2\25\1\0\3\25\7\0\2\25\2\0\1\25\1\0"+
    "\2\10\114\0\1\30\42\0\2\12\17\0\1\12\3\0"+
    "\2\12\21\0\1\31\5\0\1\32\24\0\2\32\1\31"+
    "\4\0\1\16\1\33\2\16\1\0\6\16\1\0\6\16"+
    "\4\0\1\16\1\0\2\16\1\0\3\16\7\0\2\16"+
    "\2\0\1\16\4\0\4\16\1\0\1\34\5\16\1\0"+
    "\6\16\4\0\1\16\1\0\2\16\1\0\3\16\7\0"+
    "\2\16\2\0\1\16\4\0\4\16\1\0\6\16\1\0"+
    "\6\16\4\0\1\16\1\0\2\16\1\0\3\16\7\0"+
    "\2\16\2\0\1\16\4\0\4\16\1\0\1\35\5\16"+
    "\1\0\6\16\4\0\1\16\1\0\2\16\1\0\3\16"+
    "\7\0\2\16\2\0\1\16\4\0\4\16\1\0\6\16"+
    "\1\0\1\36\5\16\4\0\1\16\1\0\2\16\1\0"+
    "\3\16\7\0\2\16\2\0\1\16\4\0\4\16\1\0"+
    "\5\16\1\37\1\0\2\16\1\40\3\16\1\41\3\0"+
    "\1\16\1\0\1\42\1\16\1\0\3\16\7\0\2\16"+
    "\2\0\1\16\4\0\1\16\1\43\2\16\1\0\6\16"+
    "\1\0\6\16\4\0\1\16\1\0\2\16\1\0\3\16"+
    "\7\0\2\16\2\0\1\16\4\0\4\16\1\0\4\16"+
    "\1\44\1\16\1\0\6\16\4\0\1\16\1\0\2\16"+
    "\1\0\3\16\7\0\2\16\2\0\1\16\3\3\1\0"+
    "\3\3\1\45\7\3\1\0\10\3\1\0\2\3\1\0"+
    "\7\3\1\0\4\3\1\0\5\3\4\0\4\46\1\0"+
    "\6\46\1\47\6\46\2\0\1\50\1\0\1\46\1\0"+
    "\2\46\1\51\3\46\7\0\2\46\2\0\1\46\4\0"+
    "\4\46\1\0\1\52\5\46\1\47\6\46\2\0\1\50"+
    "\1\0\1\46\1\0\2\46\1\51\3\46\7\0\2\46"+
    "\2\0\1\46\4\0\4\46\1\0\6\46\1\47\6\46"+
    "\2\0\1\50\1\0\1\46\1\0\2\46\1\51\1\53"+
    "\2\46\7\0\2\46\2\0\1\46\7\0\1\54\52\0"+
    "\1\55\4\0\2\55\6\0\1\55\4\0\2\55\4\0"+
    "\1\55\12\0\1\55\1\0\4\55\27\0\1\32\24\0"+
    "\2\32\5\0\2\16\1\56\1\16\1\0\6\16\1\0"+
    "\6\16\4\0\1\16\1\0\2\16\1\0\3\16\7\0"+
    "\2\16\2\0\1\16\4\0\4\16\1\0\5\16\1\57"+
    "\1\0\6\16\4\0\1\16\1\0\2\16\1\0\3\16"+
    "\7\0\2\16\2\0\1\16\4\0\4\16\1\0\1\16"+
    "\1\60\4\16\1\0\6\16\4\0\1\16\1\0\2\16"+
    "\1\0\3\16\7\0\2\16\2\0\1\16\4\0\4\16"+
    "\1\0\2\16\1\61\3\16\1\0\6\16\4\0\1\16"+
    "\1\0\2\16\1\0\3\16\7\0\2\16\2\0\1\16"+
    "\4\0\4\16\1\0\6\16\1\0\4\16\1\62\1\16"+
    "\4\0\1\16\1\0\2\16\1\0\3\16\7\0\2\16"+
    "\2\0\1\16\4\0\4\16\1\0\6\16\1\0\3\16"+
    "\1\63\2\16\4\0\1\16\1\0\2\16\1\0\3\16"+
    "\7\0\2\16\2\0\1\16\27\0\1\64\26\0\1\65"+
    "\1\66\1\67\1\65\4\70\1\66\6\70\1\71\6\70"+
    "\2\65\1\72\1\73\1\70\1\74\2\70\1\65\3\70"+
    "\1\67\1\65\1\75\1\76\1\77\2\65\2\70\2\65"+
    "\1\70\4\0\4\16\1\0\1\100\5\16\1\0\6\16"+
    "\4\0\1\16\1\0\2\16\1\0\3\16\7\0\2\16"+
    "\2\0\1\16\4\0\1\16\1\101\2\16\1\0\6\16"+
    "\1\0\6\16\4\0\1\16\1\0\2\16\1\0\3\16"+
    "\7\0\2\16\2\0\1\16\3\3\1\0\5\3\1\102"+
    "\5\3\1\0\10\3\1\0\2\3\1\0\7\3\1\0"+
    "\4\3\1\0\5\3\4\0\4\46\1\0\6\46\1\47"+
    "\6\46\2\0\1\103\1\0\1\46\1\0\2\46\1\51"+
    "\3\46\7\0\2\46\2\0\1\46\4\0\4\104\1\0"+
    "\6\104\1\47\6\104\2\0\1\50\1\0\1\104\1\0"+
    "\2\104\1\0\3\104\7\0\2\104\2\0\1\104\17\0"+
    "\1\47\10\0\1\103\1\0\1\105\3\0\1\51\12\0"+
    "\1\105\3\0\1\105\4\0\4\46\1\0\2\46\1\106"+
    "\3\46\1\47\6\46\2\0\1\103\1\0\1\46\1\0"+
    "\2\46\1\51\3\46\7\0\2\46\2\0\1\46\4\0"+
    "\4\46\1\0\6\46\1\47\6\46\2\0\1\103\1\0"+
    "\1\46\1\0\2\46\1\51\1\46\1\107\1\46\7\0"+
    "\2\46\2\0\1\46\11\0\1\110\50\0\3\16\1\111"+
    "\1\0\6\16\1\0\6\16\4\0\1\16\1\0\2\16"+
    "\1\0\3\16\7\0\2\16\2\0\1\16\4\0\4\16"+
    "\1\0\6\16\1\0\1\16\1\112\4\16\4\0\1\16"+
    "\1\0\2\16\1\0\3\16\7\0\2\16\2\0\1\16"+
    "\4\0\4\16\1\0\2\16\1\113\3\16\1\0\6\16"+
    "\4\0\1\16\1\0\2\16\1\0\3\16\7\0\2\16"+
    "\2\0\1\16\4\0\4\16\1\0\1\114\5\16\1\0"+
    "\6\16\4\0\1\16\1\0\2\16\1\0\3\16\7\0"+
    "\2\16\2\0\1\16\4\0\4\16\1\0\4\16\1\115"+
    "\1\16\1\0\6\16\4\0\1\16\1\0\2\16\1\0"+
    "\3\16\7\0\2\16\2\0\1\16\4\0\4\16\1\0"+
    "\4\16\1\116\1\16\1\0\6\16\4\0\1\16\1\0"+
    "\2\16\1\0\3\16\7\0\2\16\2\0\1\16\16\0"+
    "\1\117\37\0\1\65\1\0\6\65\1\0\6\65\1\120"+
    "\36\65\1\121\2\66\1\121\4\122\1\66\6\122\1\71"+
    "\6\122\2\121\1\123\1\124\1\122\1\125\2\122\1\121"+
    "\3\122\1\66\1\121\1\126\1\127\1\77\2\121\2\122"+
    "\2\121\1\122\1\65\1\66\1\67\1\65\4\130\1\66"+
    "\6\130\1\71\6\130\2\65\1\72\1\73\1\130\1\74"+
    "\2\130\1\65\3\130\1\67\1\65\1\75\1\76\1\77"+
    "\2\65\2\130\2\65\1\130\1\65\1\131\1\132\1\65"+
    "\4\70\1\131\6\70\1\71\6\70\2\65\1\133\1\73"+
    "\1\70\1\74\2\70\1\65\3\70\1\132\1\65\1\134"+
    "\1\76\1\77\2\65\2\70\2\65\1\70\1\65\1\131"+
    "\1\132\1\65\4\135\1\131\6\135\1\71\6\135\2\65"+
    "\1\136\1\65\1\135\1\137\2\135\1\65\3\135\1\132"+
    "\1\65\1\134\1\140\1\77\2\65\2\135\2\65\1\135"+
    "\1\65\1\131\1\132\1\65\4\130\1\131\6\130\1\71"+
    "\6\130\2\65\1\72\1\73\1\130\1\74\2\130\1\65"+
    "\3\130\1\132\1\65\1\75\1\76\1\77\2\65\2\130"+
    "\2\65\1\130\1\65\1\0\2\65\4\141\1\0\6\141"+
    "\1\142\6\141\2\65\1\143\1\73\1\141\1\144\2\141"+
    "\1\65\3\141\7\65\2\141\2\65\1\141\1\65\1\131"+
    "\1\132\1\65\4\145\1\131\6\145\1\71\6\145\2\65"+
    "\1\133\1\73\1\145\1\74\2\145\1\65\3\145\1\132"+
    "\1\65\1\134\1\76\1\77\2\65\2\145\2\65\1\145"+
    "\1\65\1\146\1\147\1\65\4\150\1\146\6\150\1\142"+
    "\6\150\2\65\1\151\1\73\1\150\1\152\2\150\1\65"+
    "\3\150\1\147\1\65\1\75\1\76\3\65\2\150\2\65"+
    "\1\150\1\65\1\146\1\147\5\65\1\146\6\65\1\120"+
    "\22\65\1\147\2\65\1\76\10\65\1\153\2\154\5\153"+
    "\1\154\6\153\1\155\22\153\1\154\3\153\1\77\7\153"+
    "\4\0\4\16\1\0\6\16\1\0\6\16\4\0\1\16"+
    "\1\0\1\156\1\16\1\0\3\16\7\0\2\16\2\0"+
    "\1\16\1\157\1\0\2\157\4\160\1\0\6\160\1\161"+
    "\6\160\4\157\1\160\1\157\2\160\1\157\3\160\7\157"+
    "\2\160\2\157\1\160\1\3\2\162\1\0\4\3\1\162"+
    "\6\3\1\0\10\3\1\0\2\3\1\0\6\3\1\162"+
    "\1\163\4\3\1\0\5\3\17\0\1\47\10\0\1\103"+
    "\31\0\4\104\1\0\6\104\1\47\6\104\4\0\1\104"+
    "\1\0\2\104\1\0\3\104\7\0\2\104\2\0\1\104"+
    "\17\0\1\47\10\0\1\103\1\0\1\105\16\0\1\105"+
    "\3\0\1\105\4\0\4\164\1\0\6\164\1\47\6\164"+
    "\2\0\1\103\1\0\1\164\1\0\2\164\1\51\3\164"+
    "\7\0\2\164\2\0\1\164\4\0\1\165\3\46\1\0"+
    "\6\46\1\47\6\46\2\0\1\103\1\0\1\46\1\0"+
    "\2\46\1\51\3\46\7\0\2\46\2\0\1\46\1\0"+
    "\2\166\5\0\1\166\31\0\1\166\1\163\12\0\1\111"+
    "\1\0\6\111\1\0\45\111\4\0\4\16\1\0\1\167"+
    "\5\16\1\0\6\16\4\0\1\16\1\0\2\16\1\0"+
    "\3\16\7\0\2\16\2\0\1\16\4\0\4\16\1\0"+
    "\3\16\1\170\2\16\1\0\6\16\4\0\1\16\1\0"+
    "\2\16\1\0\3\16\7\0\2\16\2\0\1\16\4\0"+
    "\4\16\1\0\5\16\1\171\1\0\6\16\4\0\1\16"+
    "\1\0\2\16\1\0\3\16\7\0\2\16\2\0\1\16"+
    "\4\0\4\16\1\0\6\16\1\0\5\16\1\172\4\0"+
    "\1\16\1\0\2\16\1\0\3\16\7\0\2\16\2\0"+
    "\1\16\4\0\1\16\1\173\2\16\1\0\6\16\1\0"+
    "\6\16\4\0\1\16\1\0\2\16\1\0\3\16\7\0"+
    "\2\16\2\0\1\16\30\0\1\174\25\0\1\121\1\0"+
    "\6\121\1\0\6\121\1\65\37\121\2\131\1\121\4\122"+
    "\1\131\6\122\1\71\6\122\2\121\1\175\1\124\1\122"+
    "\1\125\2\122\1\121\3\122\1\131\1\121\1\176\1\127"+
    "\1\77\2\121\2\122\2\121\1\122\1\121\2\131\1\121"+
    "\4\122\1\131\6\122\1\71\6\122\2\121\1\123\1\124"+
    "\1\122\1\125\2\122\1\121\3\122\1\131\1\121\1\126"+
    "\1\127\1\77\2\121\2\122\2\121\1\122\1\121\1\0"+
    "\2\121\4\177\1\0\6\177\1\142\6\177\2\121\1\200"+
    "\1\124\1\177\1\201\2\177\1\121\3\177\7\121\2\177"+
    "\2\121\1\177\1\121\2\131\1\121\4\202\1\131\6\202"+
    "\1\71\6\202\2\121\1\175\1\124\1\202\1\125\2\202"+
    "\1\121\3\202\1\131\1\121\1\176\1\127\1\77\2\121"+
    "\2\202\2\121\1\202\1\121\2\146\1\121\4\203\1\146"+
    "\6\203\1\142\6\203\2\121\1\204\1\124\1\203\1\205"+
    "\2\203\1\121\3\203\1\146\1\121\1\126\1\127\3\121"+
    "\2\203\2\121\1\203\1\121\2\146\5\121\1\146\6\121"+
    "\1\65\22\121\1\146\2\121\1\127\10\121\1\65\1\131"+
    "\1\132\1\65\4\130\1\131\6\130\1\71\6\130\2\65"+
    "\1\133\1\73\1\130\1\74\2\130\1\65\3\130\1\132"+
    "\1\65\1\134\1\76\1\77\2\65\2\130\2\65\1\130"+
    "\1\121\2\131\5\121\1\131\6\121\1\65\22\121\1\131"+
    "\1\121\1\176\1\127\1\77\7\121\1\65\1\131\1\132"+
    "\5\65\1\131\6\65\1\120\22\65\1\132\1\65\1\134"+
    "\1\76\1\77\10\65\1\131\1\132\1\65\4\206\1\131"+
    "\6\206\1\71\6\206\2\65\1\133\1\73\1\206\1\207"+
    "\2\206\1\65\3\206\1\132\1\65\1\134\1\76\1\77"+
    "\2\65\2\206\2\65\1\206\1\65\1\146\1\147\5\65"+
    "\1\146\6\65\1\120\22\65\1\147\1\65\1\134\1\76"+
    "\11\65\1\210\1\211\1\65\4\135\1\210\6\135\1\212"+
    "\6\135\2\65\1\136\1\65\1\135\1\213\2\135\1\65"+
    "\3\135\1\211\3\65\1\77\2\65\2\135\2\65\1\135"+
    "\1\65\1\210\1\211\1\65\4\214\1\210\6\214\1\212"+
    "\6\214\2\65\1\136\1\65\1\214\1\213\2\214\1\65"+
    "\3\214\1\211\3\65\1\77\2\65\2\214\2\65\1\214"+
    "\1\65\1\210\1\211\1\65\4\135\1\210\6\135\1\212"+
    "\6\135\2\65\1\136\1\65\1\135\1\137\2\135\1\65"+
    "\3\135\1\211\3\65\1\77\2\65\2\135\2\65\1\135"+
    "\1\65\1\146\1\147\1\65\4\215\1\146\6\215\1\216"+
    "\6\215\2\65\1\217\1\65\1\215\1\220\2\215\1\65"+
    "\3\215\1\147\2\65\1\140\3\65\2\215\2\65\1\215"+
    "\1\65\1\0\2\65\4\141\1\0\6\141\1\142\6\141"+
    "\2\65\1\143\1\221\1\141\1\144\2\141\1\65\3\141"+
    "\7\65\2\141\2\65\1\141\1\65\1\0\2\65\4\222"+
    "\1\0\6\222\1\142\6\222\2\65\1\223\1\65\1\222"+
    "\1\224\2\222\1\65\3\222\3\65\1\225\3\65\2\222"+
    "\2\65\1\222\1\65\1\0\6\65\1\0\6\65\1\226"+
    "\10\65\1\143\26\65\1\0\2\65\4\227\1\0\6\227"+
    "\1\226\6\227\2\65\1\143\1\65\1\227\1\144\2\227"+
    "\1\65\3\227\7\65\2\227\2\65\1\227\1\65\1\131"+
    "\1\132\1\65\4\145\1\131\6\145\1\71\6\145\2\65"+
    "\1\133\1\73\1\145\1\207\2\145\1\65\3\145\1\132"+
    "\1\65\1\134\1\76\1\77\2\65\2\145\2\65\1\145"+
    "\1\121\2\146\5\121\1\146\6\121\1\65\22\121\1\146"+
    "\13\121\1\65\1\146\1\147\5\65\1\146\6\65\1\120"+
    "\22\65\1\147\14\65\1\0\2\65\4\150\1\0\6\150"+
    "\1\142\6\150\2\65\1\151\1\73\1\150\1\152\2\150"+
    "\1\65\3\150\7\65\2\150\2\65\1\150\1\65\1\0"+
    "\2\65\4\141\1\0\6\141\1\142\6\141\2\65\1\151"+
    "\1\73\1\141\1\144\2\141\1\65\3\141\7\65\2\141"+
    "\2\65\1\141\1\65\1\0\2\65\4\230\1\0\6\230"+
    "\1\142\6\230\2\65\1\151\1\73\1\230\1\152\2\230"+
    "\1\65\3\230\7\65\2\230\2\65\1\230\1\153\1\0"+
    "\6\153\1\0\6\153\1\155\37\153\2\154\5\153\1\154"+
    "\6\153\1\155\22\153\1\154\14\153\1\0\2\153\4\231"+
    "\1\0\6\231\1\155\6\231\2\153\1\232\1\153\1\231"+
    "\1\155\2\231\1\153\3\231\7\153\2\231\2\153\1\231"+
    "\4\0\4\16\1\0\3\16\1\233\2\16\1\0\6\16"+
    "\4\0\1\16\1\0\2\16\1\0\3\16\7\0\2\16"+
    "\2\0\1\16\1\157\1\0\6\157\1\0\6\157\1\161"+
    "\36\157\3\3\1\0\13\3\1\0\10\3\1\0\2\3"+
    "\1\0\7\3\1\163\4\3\1\0\5\3\4\0\4\164"+
    "\1\0\6\164\1\234\6\164\2\0\1\235\1\0\1\164"+
    "\1\0\2\164\1\51\3\164\7\0\2\164\2\0\1\164"+
    "\4\0\4\46\1\0\6\46\1\47\6\46\2\0\1\103"+
    "\1\0\1\46\1\0\2\46\1\51\2\46\1\236\7\0"+
    "\2\46\2\0\1\46\43\0\1\163\16\0\1\16\1\237"+
    "\2\16\1\0\6\16\1\0\6\16\4\0\1\16\1\0"+
    "\2\16\1\0\3\16\7\0\2\16\2\0\1\16\4\0"+
    "\4\16\1\0\4\16\1\240\1\16\1\0\6\16\4\0"+
    "\1\16\1\0\2\16\1\0\3\16\7\0\2\16\2\0"+
    "\1\16\4\0\4\16\1\0\6\16\1\0\1\16\1\241"+
    "\4\16\4\0\1\16\1\0\2\16\1\0\3\16\7\0"+
    "\2\16\2\0\1\16\4\0\4\16\1\0\1\242\5\16"+
    "\1\0\6\16\4\0\1\16\1\0\2\16\1\0\3\16"+
    "\7\0\2\16\2\0\1\16\4\0\4\16\1\0\2\16"+
    "\1\243\3\16\1\0\6\16\4\0\1\16\1\0\2\16"+
    "\1\0\3\16\7\0\2\16\2\0\1\16\31\0\1\244"+
    "\24\0\1\121\2\131\1\121\4\245\1\131\6\245\1\71"+
    "\6\245\2\121\1\175\1\124\1\245\1\246\2\245\1\121"+
    "\3\245\1\131\1\121\1\176\1\127\1\77\2\121\2\245"+
    "\2\121\1\245\1\121\2\146\5\121\1\146\6\121\1\65"+
    "\22\121\1\146\1\121\1\176\1\127\11\121\1\0\2\121"+
    "\4\177\1\0\6\177\1\142\6\177\2\121\1\200\1\247"+
    "\1\177\1\201\2\177\1\121\3\177\7\121\2\177\2\121"+
    "\1\177\1\121\1\0\6\121\1\0\6\121\1\226\10\121"+
    "\1\200\26\121\1\0\2\121\4\250\1\0\6\250\1\226"+
    "\6\250\2\121\1\200\1\121\1\250\1\201\2\250\1\121"+
    "\3\250\7\121\2\250\2\121\1\250\1\121\2\131\1\121"+
    "\4\202\1\131\6\202\1\71\6\202\2\121\1\175\1\124"+
    "\1\202\1\246\2\202\1\121\3\202\1\131\1\121\1\176"+
    "\1\127\1\77\2\121\2\202\2\121\1\202\1\121\1\0"+
    "\2\121\4\203\1\0\6\203\1\142\6\203\2\121\1\204"+
    "\1\124\1\203\1\205\2\203\1\121\3\203\7\121\2\203"+
    "\2\121\1\203\1\121\1\0\2\121\4\177\1\0\6\177"+
    "\1\142\6\177\2\121\1\204\1\124\1\177\1\201\2\177"+
    "\1\121\3\177\7\121\2\177\2\121\1\177\1\121\1\0"+
    "\2\121\4\251\1\0\6\251\1\142\6\251\2\121\1\204"+
    "\1\124\1\251\1\205\2\251\1\121\3\251\7\121\2\251"+
    "\2\121\1\251\1\65\1\131\1\132\1\65\4\206\1\131"+
    "\6\206\1\252\6\206\2\65\1\253\1\221\1\206\1\254"+
    "\2\206\1\65\3\206\1\132\1\65\1\134\1\76\1\77"+
    "\2\65\2\206\2\65\1\206\1\65\1\210\1\211\1\65"+
    "\4\255\1\210\6\255\1\212\6\255\2\65\1\256\1\65"+
    "\1\255\1\207\2\255\1\65\3\255\1\211\3\65\1\77"+
    "\2\65\2\255\2\65\1\255\1\0\2\210\5\0\1\210"+
    "\31\0\1\210\3\0\1\77\7\0\1\65\1\210\1\211"+
    "\5\65\1\210\6\65\1\120\22\65\1\211\3\65\1\77"+
    "\10\65\1\210\1\211\1\65\4\215\1\210\6\215\1\257"+
    "\6\215\2\65\1\217\1\65\1\215\1\220\2\215\1\65"+
    "\3\215\1\211\2\65\1\225\1\77\2\65\2\215\2\65"+
    "\1\215\1\65\1\210\1\211\1\65\4\260\1\210\6\260"+
    "\1\261\6\260\2\65\1\262\1\65\1\260\1\213\2\260"+
    "\1\65\3\260\1\211\3\65\1\77\2\65\2\260\2\65"+
    "\1\260\1\65\1\210\1\211\1\65\4\214\1\210\6\214"+
    "\1\261\6\214\2\65\1\262\1\65\1\214\1\213\2\214"+
    "\1\65\3\214\1\211\3\65\1\77\2\65\2\214\2\65"+
    "\1\214\1\65\1\0\2\65\4\215\1\0\6\215\1\216"+
    "\6\215\2\65\1\217\1\65\1\215\1\263\2\215\1\65"+
    "\3\215\7\65\2\215\2\65\1\215\1\65\1\0\2\65"+
    "\4\264\1\0\6\264\1\216\6\264\2\65\1\265\1\65"+
    "\1\264\1\266\2\264\1\65\3\264\7\65\2\264\2\65"+
    "\1\264\1\65\1\0\2\65\4\267\1\0\6\267\1\216"+
    "\6\267\2\65\1\217\1\65\1\267\1\263\2\267\1\65"+
    "\3\267\7\65\2\267\2\65\1\267\1\65\1\0\2\65"+
    "\4\215\1\0\6\215\1\216\6\215\2\65\1\217\1\65"+
    "\1\215\1\220\2\215\1\65\3\215\7\65\2\215\2\65"+
    "\1\215\1\65\1\0\2\65\4\227\1\0\6\227\1\142"+
    "\6\227\2\65\1\143\1\221\1\227\1\144\2\227\1\65"+
    "\3\227\7\65\2\227\2\65\1\227\1\65\1\0\2\65"+
    "\4\222\1\0\6\222\1\226\6\222\2\65\1\223\1\65"+
    "\1\222\1\263\2\222\1\65\3\222\7\65\2\222\2\65"+
    "\1\222\1\65\1\0\2\65\4\267\1\0\6\267\1\226"+
    "\6\267\2\65\1\223\1\65\1\267\1\263\2\267\1\65"+
    "\3\267\7\65\2\267\2\65\1\267\1\65\1\0\2\65"+
    "\4\222\1\0\6\222\1\226\6\222\2\65\1\223\1\65"+
    "\1\222\1\224\2\222\1\65\3\222\7\65\2\222\2\65"+
    "\1\222\1\65\1\0\2\65\4\215\1\0\6\215\1\216"+
    "\6\215\2\65\1\217\1\65\1\215\1\220\2\215\1\65"+
    "\3\215\3\65\1\225\3\65\2\215\2\65\1\215\1\65"+
    "\1\0\2\65\4\215\1\0\6\215\1\225\6\215\2\65"+
    "\1\217\1\65\1\215\1\220\2\215\1\65\3\215\3\65"+
    "\1\225\3\65\2\215\2\65\1\215\1\65\1\0\2\65"+
    "\4\227\1\0\6\227\1\226\6\227\2\65\1\143\1\65"+
    "\1\227\1\65\2\227\1\65\3\227\7\65\2\227\2\65"+
    "\1\227\1\65\1\0\2\65\4\230\1\0\6\230\1\142"+
    "\6\230\2\65\1\151\1\73\1\230\1\144\2\230\1\65"+
    "\3\230\7\65\2\230\2\65\1\230\1\153\1\0\2\153"+
    "\4\231\1\0\6\231\1\155\6\231\2\153\1\232\1\153"+
    "\1\231\1\153\2\231\1\153\3\231\7\153\2\231\2\153"+
    "\1\231\1\153\1\0\6\153\1\0\6\153\1\155\10\153"+
    "\1\232\25\153\4\0\4\16\1\0\6\16\1\0\1\270"+
    "\5\16\4\0\1\16\1\0\2\16\1\0\3\16\7\0"+
    "\2\16\2\0\1\16\17\0\1\234\42\0\4\271\1\0"+
    "\6\271\1\234\6\271\2\0\1\235\1\0\1\271\1\0"+
    "\2\271\1\0\3\271\7\0\2\271\2\0\1\271\4\0"+
    "\3\46\1\272\1\0\6\46\1\47\6\46\2\0\1\103"+
    "\1\0\1\46\1\0\2\46\1\51\3\46\7\0\2\46"+
    "\2\0\1\46\1\273\1\0\2\273\4\274\1\0\6\274"+
    "\1\275\6\274\4\273\1\274\1\273\2\274\1\273\3\274"+
    "\7\273\2\274\2\273\1\274\4\0\4\16\1\0\5\16"+
    "\1\276\1\0\6\16\4\0\1\16\1\0\2\16\1\0"+
    "\3\16\7\0\2\16\2\0\1\16\4\0\3\16\1\277"+
    "\1\0\6\16\1\0\6\16\4\0\1\16\1\0\2\16"+
    "\1\0\3\16\7\0\2\16\2\0\1\16\1\300\1\0"+
    "\2\300\4\301\1\0\6\301\1\302\6\301\4\300\1\301"+
    "\1\300\2\301\1\300\3\301\7\300\2\301\2\300\1\301"+
    "\1\243\1\0\6\243\1\0\45\243\4\0\4\303\1\0"+
    "\6\303\1\0\6\303\4\0\1\303\1\0\2\303\1\0"+
    "\3\303\7\0\2\303\2\0\1\303\1\121\2\131\1\121"+
    "\4\245\1\131\6\245\1\252\6\245\2\121\1\304\1\247"+
    "\1\245\1\305\2\245\1\121\3\245\1\131\1\121\1\176"+
    "\1\127\1\77\2\121\2\245\2\121\1\245\1\121\1\210"+
    "\1\306\1\121\4\307\1\210\6\307\1\212\6\307\2\121"+
    "\1\310\1\121\1\307\1\246\2\307\1\121\3\307\1\306"+
    "\3\121\1\77\2\121\2\307\2\121\1\307\1\121\1\0"+
    "\2\121\4\250\1\0\6\250\1\142\6\250\2\121\1\200"+
    "\1\247\1\250\1\201\2\250\1\121\3\250\7\121\2\250"+
    "\2\121\1\250\1\121\1\0\2\121\4\250\1\0\6\250"+
    "\1\226\6\250\2\121\1\200\1\121\1\250\1\121\2\250"+
    "\1\121\3\250\7\121\2\250\2\121\1\250\1\121\1\0"+
    "\2\121\4\251\1\0\6\251\1\142\6\251\2\121\1\204"+
    "\1\124\1\251\1\201\2\251\1\121\3\251\7\121\2\251"+
    "\2\121\1\251\1\65\1\131\1\132\1\65\4\222\1\131"+
    "\6\222\1\252\6\222\2\65\1\223\1\65\1\222\1\224"+
    "\2\222\1\65\3\222\1\132\1\65\1\134\1\140\1\77"+
    "\2\65\2\222\2\65\1\222\1\65\1\131\1\132\1\65"+
    "\4\311\1\131\6\311\1\312\6\311\2\65\1\253\1\65"+
    "\1\311\1\313\2\311\1\65\3\311\1\132\1\65\1\134"+
    "\1\76\1\77\2\65\2\311\2\65\1\311\1\65\1\210"+
    "\1\211\1\65\4\314\1\210\6\314\1\212\6\314\2\65"+
    "\1\143\1\65\1\314\1\254\2\314\1\65\3\314\1\211"+
    "\3\65\1\77\2\65\2\314\2\65\1\314\1\65\1\210"+
    "\1\211\1\65\4\255\1\210\6\255\1\212\6\255\2\65"+
    "\1\256\1\65\1\255\1\313\2\255\1\65\3\255\1\211"+
    "\3\65\1\77\2\65\2\255\2\65\1\255\1\65\1\210"+
    "\1\211\1\65\4\311\1\210\6\311\1\212\6\311\2\65"+
    "\1\256\1\65\1\311\1\313\2\311\1\65\3\311\1\211"+
    "\3\65\1\77\2\65\2\311\2\65\1\311\1\65\1\210"+
    "\1\211\1\65\4\215\1\210\6\215\1\261\6\215\2\65"+
    "\1\217\1\65\1\215\1\220\2\215\1\65\3\215\1\211"+
    "\2\65\1\225\1\77\2\65\2\215\2\65\1\215\1\65"+
    "\1\210\1\211\1\65\4\260\1\210\6\260\1\261\6\260"+
    "\2\65\1\262\1\65\1\260\1\266\2\260\1\65\3\260"+
    "\1\211\3\65\1\77\2\65\2\260\2\65\1\260\1\65"+
    "\1\210\1\211\1\65\4\264\1\210\6\264\1\261\6\264"+
    "\2\65\1\265\1\65\1\264\1\266\2\264\1\65\3\264"+
    "\1\211\3\65\1\77\2\65\2\264\2\65\1\264\1\65"+
    "\1\0\2\65\4\264\1\0\6\264\1\216\6\264\2\65"+
    "\1\262\1\65\1\264\1\266\2\264\1\65\3\264\7\65"+
    "\2\264\2\65\1\264\1\65\1\0\2\65\4\315\1\0"+
    "\6\315\1\216\6\315\2\65\1\262\1\65\1\315\1\263"+
    "\2\315\1\65\3\315\7\65\2\315\2\65\1\315\1\65"+
    "\1\0\2\65\4\264\1\0\6\264\1\120\6\264\2\65"+
    "\1\265\1\65\1\264\1\65\2\264\1\65\3\264\7\65"+
    "\2\264\2\65\1\264\1\65\1\0\6\65\1\0\6\65"+
    "\1\120\10\65\1\265\26\65\1\0\2\65\4\264\1\0"+
    "\6\264\1\120\6\264\2\65\1\265\1\65\1\264\1\266"+
    "\2\264\1\65\3\264\7\65\2\264\2\65\1\264\1\65"+
    "\1\0\2\65\4\267\1\0\6\267\1\216\6\267\2\65"+
    "\1\262\1\65\1\267\1\263\2\267\1\65\3\267\7\65"+
    "\2\267\2\65\1\267\4\0\4\271\1\0\6\271\1\234"+
    "\6\271\4\0\1\271\1\0\2\271\1\0\3\271\7\0"+
    "\2\271\2\0\1\271\1\273\1\0\6\273\1\0\6\273"+
    "\1\275\36\273\1\316\1\0\2\316\4\317\1\0\6\317"+
    "\1\320\6\317\4\316\1\317\1\316\2\317\1\316\3\317"+
    "\7\316\2\317\2\316\1\317\1\321\1\0\2\321\4\322"+
    "\1\0\6\322\1\323\6\322\4\321\1\322\1\321\2\322"+
    "\1\321\3\322\7\321\2\322\2\321\1\322\1\300\1\0"+
    "\6\300\1\0\6\300\1\302\36\300\4\0\4\303\1\0"+
    "\6\303\1\0\6\303\3\0\1\324\1\303\1\325\2\303"+
    "\1\0\3\303\7\0\2\303\2\0\1\303\1\121\2\131"+
    "\1\121\4\326\1\131\6\326\1\312\6\326\2\121\1\304"+
    "\1\121\1\326\1\327\2\326\1\121\3\326\1\131\1\121"+
    "\1\176\1\127\1\77\2\121\2\326\2\121\1\326\1\121"+
    "\1\210\1\306\1\121\4\330\1\210\6\330\1\212\6\330"+
    "\2\121\1\200\1\121\1\330\1\305\2\330\1\121\3\330"+
    "\1\306\3\121\1\77\2\121\2\330\2\121\1\330\1\121"+
    "\1\210\1\306\5\121\1\210\6\121\1\65\22\121\1\306"+
    "\3\121\1\77\10\121\1\210\1\306\1\121\4\307\1\210"+
    "\6\307\1\212\6\307\2\121\1\310\1\121\1\307\1\327"+
    "\2\307\1\121\3\307\1\306\3\121\1\77\2\121\2\307"+
    "\2\121\1\307\1\121\1\210\1\306\1\121\4\326\1\210"+
    "\6\326\1\212\6\326\2\121\1\310\1\121\1\326\1\327"+
    "\2\326\1\121\3\326\1\306\3\121\1\77\2\121\2\326"+
    "\2\121\1\326\1\65\1\210\1\211\1\65\4\311\1\210"+
    "\6\311\1\331\6\311\4\65\1\311\1\313\2\311\1\65"+
    "\3\311\1\211\3\65\1\77\2\65\2\311\2\65\1\311"+
    "\1\65\1\131\1\132\1\65\4\215\1\131\6\215\1\332"+
    "\6\215\2\65\1\217\1\65\1\215\1\220\2\215\1\65"+
    "\3\215\1\132\1\65\1\134\1\140\1\77\2\65\2\215"+
    "\2\65\1\215\1\65\1\210\1\211\1\65\4\333\1\210"+
    "\6\333\1\331\6\333\4\65\1\333\1\313\2\333\1\65"+
    "\3\333\1\211\3\65\1\77\2\65\2\333\2\65\1\333"+
    "\1\65\1\210\1\211\1\65\4\314\1\210\6\314\1\212"+
    "\6\314\2\65\1\143\1\65\1\314\1\65\2\314\1\65"+
    "\3\314\1\211\3\65\1\77\2\65\2\314\2\65\1\314"+
    "\1\65\1\0\2\65\4\315\1\0\6\315\1\216\6\315"+
    "\2\65\1\262\1\65\1\315\1\266\2\315\1\65\3\315"+
    "\7\65\2\315\2\65\1\315\1\316\1\0\6\316\1\0"+
    "\6\316\1\320\36\316\1\321\1\0\6\321\1\0\6\321"+
    "\1\323\36\321\17\0\1\334\42\0\4\335\1\0\6\335"+
    "\1\0\6\335\3\0\1\324\1\335\1\325\2\335\1\0"+
    "\3\335\7\0\2\335\2\0\1\335\1\121\1\210\1\306"+
    "\1\121\4\326\1\210\6\326\1\336\6\326\4\121\1\326"+
    "\1\327\2\326\1\121\3\326\1\306\3\121\1\77\2\121"+
    "\2\326\2\121\1\326\1\121\1\210\1\306\1\121\4\337"+
    "\1\210\6\337\1\336\6\337\4\121\1\337\1\327\2\337"+
    "\1\121\3\337\1\306\3\121\1\77\2\121\2\337\2\121"+
    "\1\337\1\121\1\210\1\306\1\121\4\330\1\210\6\330"+
    "\1\212\6\330\2\121\1\200\1\121\1\330\1\121\2\330"+
    "\1\121\3\330\1\306\3\121\1\77\2\121\2\330\2\121"+
    "\1\330\1\65\1\210\1\211\5\65\1\210\6\65\1\331"+
    "\22\65\1\211\3\65\1\77\10\65\1\131\1\132\1\65"+
    "\4\215\1\131\6\215\1\340\6\215\2\65\1\217\1\65"+
    "\1\215\1\220\2\215\1\65\3\215\1\132\1\65\1\134"+
    "\1\140\1\77\2\65\2\215\2\65\1\215\1\65\1\210"+
    "\1\211\1\65\4\333\1\210\6\333\1\331\6\333\4\65"+
    "\1\333\1\65\2\333\1\65\3\333\1\211\3\65\1\77"+
    "\2\65\2\333\2\65\1\333\4\0\4\335\1\0\6\335"+
    "\1\0\6\335\3\0\1\324\1\335\1\341\2\335\1\0"+
    "\3\335\7\0\2\335\2\0\1\335\1\121\1\210\1\306"+
    "\1\121\4\337\1\210\6\337\1\336\6\337\4\121\1\337"+
    "\1\121\2\337\1\121\3\337\1\306\3\121\1\77\2\121"+
    "\2\337\2\121\1\337\1\65\1\131\1\132\1\65\4\264"+
    "\1\131\6\264\1\340\6\264\2\65\1\265\1\65\1\264"+
    "\1\266\2\264\1\65\3\264\1\132\1\65\1\134\1\76"+
    "\1\77\2\65\2\264\2\65\1\264\4\0\4\342\1\0"+
    "\6\342\1\0\6\342\3\0\1\324\1\342\1\341\2\342"+
    "\1\0\3\342\7\0\2\342\2\0\1\342\4\0\4\342"+
    "\1\0\6\342\1\0\6\342\3\0\1\324\1\342\1\0"+
    "\2\342\1\0\3\342\7\0\2\342\2\0\1\342";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9568];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\3\1\1\11\16\1\5\0\7\1\1\0"+
    "\4\1\1\0\1\11\5\0\7\1\4\0\2\1\6\0"+
    "\3\1\3\0\1\1\2\0\10\1\14\0\4\1\1\0"+
    "\1\1\12\0\2\1\1\0\3\1\1\11\1\1\2\0"+
    "\5\1\16\0\7\1\1\0\5\1\2\0\5\1\1\0"+
    "\5\1\6\0\1\1\4\0\14\1\1\0\4\1\1\0"+
    "\2\1\7\0\1\1\2\0\1\1\1\0\2\1\1\0"+
    "\2\1\5\0\2\1\1\0\1\1\3\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  RythmLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin (YYINITIAL);return RythmTypes.TEXT;
            }
          case 18: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            }
          case 19: break;
          case 3: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          case 20: break;
          case 4: 
            { return RythmTypes.NUMBER;
            }
          case 21: break;
          case 5: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_KEY;
            }
          case 22: break;
          case 6: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_METHOD;
            }
          case 23: break;
          case 7: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_IF;
            }
          case 24: break;
          case 8: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_FOR;
            }
          case 25: break;
          case 9: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_ARGS;
            }
          case 26: break;
          case 10: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_I_18_N;
            }
          case 27: break;
          case 11: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_ELSE;
            }
          case 28: break;
          case 12: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_RENDER;
            }
          case 29: break;
          case 13: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_INVOKE;
            }
          case 30: break;
          case 14: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_IMPORT;
            }
          case 31: break;
          case 15: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_PREFIX;
            }
          case 32: break;
          case 16: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_SECTION;
            }
          case 33: break;
          case 17: 
            { yybegin(YYINITIAL); return RythmTypes.RYTHM_EXTENDS;
            }
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
