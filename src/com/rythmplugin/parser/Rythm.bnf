{
  parserClass="com.rythmplugin.parser.RythmParser"
  //parserUtilClass="com.rythmplugin.parser.RythmParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Rythm"
  psiImplClassSuffix="Impl"
  psiPackage="com.rythmplugin.psi"
  psiImplPackage="com.rythmplugin.psi.impl"
  //psiImplUtilClass = "com.rythmplugin.parser.RythmPsiImplUtil"

  elementTypeHolderClass="com.rythmplugin.psi.RythmTypes"
  elementTypeClass="com.rythmplugin.lexer.RythmElementType"
  tokenTypeClass="com.rythmplugin.parser.RythmTokenType"

  tokens= [
        AT = "@"
        BAR =           "|"
        LEFTBRACES =    "{:"
        RIGHTBRACES =   ":}"

        COLON =         ":"
        DOT =           "."
        COMMA =         ","
        MUL =           "*"
        LBRACE =        "{"
        RBRACE =        "}"
        LPAREN =        "("
        RPAREN =        ")"


        AND =           "&&"
        SEMICOLON =     ";"
        AUSRF =         "!"
        EQ =            "="
        SLASH =         "/"
        HSHTG =         "#"
        BRCSL =         "["
        BRCSR =         "]"
        DOLLAR =        "$"
        MINUS =         "-"
        //GREATER =       "<"
        //SMALLER =       ">"

        PLUS =          "+"
        GF =            '"'


 //commented for live preview of grammar-kit
        // Rythm Keywords
        RYTHM_IF =      "@if"
        RYTHM_ELSE =    "else"
        RYTHM_EXTENDS = "@extends"
        RYTHM_FOR =     "@for"
        RYTHM_IMPORT =  "@import"
        RYTHM_ARGS =    "@args"
        RYTHM_SECTION = "@section"
        RYTHM_I18N =    "@i18n"
        RYTHM_PREFIX =  "@prefix"
        RYTHM_RENDER =  "@render"
        RYTHM_INVOKE =  "@invoke"

        // Java keywords
        CLASS =         "class"
        EXTENDS =       "extends"
        IMPORT =        "import"
        PACKAGE =       "package"
        STATIC =        "static"
        SUPER =         "super"

        // Regex
        IDENTIFIER = "regexp:[a-zA-Z_]+|[0-9]+"
        block_comment = 'regexp:\@\*(\n.*)+\*\@|\@\*|\*\@|\*(\s*\w+.*)+|\*\s|\<\!\-\-(\n.+)+\-\>|[^:]\/\/.*'
        WHITE_SPACE ='regexp:[\ \t\f\s]'

        RYTHM_KEY = "regexp:\@\w+"
        HTML = "regexp:\<[^@}{,I]+\>|\<[a-z]+[^I]\w*[^@}{,12346789I]+|\"\>|\/[^@}{]+\/\w*.\>|\".*\"\>|\'[^@}{]+|\"[^@}{)]+?\>|\"\s|\/*>|\-\-\>|\/\w+\"\s*class\=[^@]+|selected\=\"selected\"|\(\'|var.*\{|\}\;|\$.*\}*\;*|\}.*\;|.*\;[^\s]|\'.*(\+|\;)|return.*(\;|\+)|function.*\{|\w+\/\w+\-*.\w+|\/\w+\/*|\)\;"

        STRING_LITERAL ='regexp:\"\#*([a-zA-Z0-9]+\.*\w*)+\"|\"(\/\w+)+\"|\"(\w+\/\w+)+\"|\"\s*\:\s*\"'


  ]
}

{
//pin("RYTHM_.*")=2;
pin("RYTHM_IF")=2;
}

//FILE

templateFile ::= rythmFile

rythmFile ::= (initialDeclaration RYTHM_SECTION+ RYTHM_BLOCK HTML_BLOCK RYTHM_SYN){pin="HTML_BLOCK"}


// INITIAL DECLARATION
initialDeclaration ::= (RYTHM_ARGS RYTHM_IMPORT* RYTHM_EXTENDS) {pin="RYTHM_EXTENDS"}

qualifiedName ::= (IDENTIFIER+ '.'*)+|IDENTIFIER+


// RYTHM PARTS
RYTHM::= RYTHM_SYN|RYTHM_INVOKE|RYTHM_RENDER|RYTHM_ELSE

RYTHM_SYN ::= RYTHM_I18N |RYTHM_FOR| RYTHM_IF| RYTHM_PREFIX |RYTHM_BLOCK|rythmMethodCall|RYTHM_KEY_IDENT


RYTHM_ARGS ::= '@args' (qualifiedName ','*)+

RYTHM_IMPORT ::= '@import' qualifiedName+

RYTHM_EXTENDS ::= '@extends' '('+ qualifiedName ','* 'title'':' '('+ (IDENTIFIER methodCall* '+'* STRING_LITERAL* '+'* IDENTIFIER* methodCall*|qualifiedName)? ')'*

RYTHM_PREFIX ::= '@prefix'

RYTHM_SECTION ::= '@section''(' IDENTIFIER* ')' '{' HTML RYTHM_SYN* HTML* RYTHM_SYN* HTML* RYTHM_SYN* ':'* RYTHM_SYN* HTML* '}'

RYTHM_BLOCK ::= RYTHM_KEY_IDENT '('+ '"'* UNDEFINED_IDENT* ':'* '/'* HTML*'+'* identMethodCall* STRING_LITERAL* ','* UNDEFINED_IDENT_BLOCK* HTML* RYTHM_BLOCK* (RYTHM_SYN* HTML+)*')'+ '{' HTML* RYTHM_SYN* ':'* RYTHM_SYN* HTML* RYTHM_IF* RYTHM_SYN* (HTML RYTHM_SYN*)* '}'

RYTHM_I18N ::= '@i18n' '('+ STRING_LITERAL ('+' IDENTIFIER)* ')'+

RYTHM_KEY_IDENT ::= RYTHM_KEY

RYTHM_IF ::= '@if' '(' EXCL* '!'* IDENTIFIER '=='* ')'*  methodCall* '||'* '&&'* UNDEFINED_IDENT* methodCall* '>'* UNDEFINED_IDENT* DIGIT* ')'* '!='*  '{' RYTHM_SYN* HTML* (RYTHM_SYN* methodCall* HTML)* UNDEFINED_IDENT* ')'* '{'* '-'* UNDEFINED_IDENT_BLOCK* HTML* SCRIPT_BLOCK* HTML* UNDEFINED_IDENT_BLOCK* '}' ('else' '{' HTML '}')*

STATEMENT ::= EXCL* '!'* IDENTIFIER OPERATOR methodCall* OPERATOR* UNDEFINED_IDENT* methodCall* UNDEFINED_IDENT* DIGIT* OPERATOR

OPERATOR ::= '=='|'>'|'<'|'||'|'&&'|'<='|'>='|'!='|'==='|'!'

RYTHM_IF_ELSE ::= 'else' '{' (HTML RYTHM_SYN HTML RYTHM_SYN*) HTML* (RYTHM_SYN* HTML)+ '}'



RYTHM_FOR ::= '@for' '(' qualifiedName* UNDEFINED_IDENT* ':'* UNDEFINED_IDENT* methodCall* ')' '{' //HTML* RYTHM_SYN HTML RYTHM_IF HTML RYTHM_SYN HTML '}'


//HTML-RYTHM-MIX

HTML_BLOCK ::= HTML RYTHM_BLOCK (HTML* RYTHM_SYN HTML* RYTHM_IF_ELSE*) (HTML RYTHM_SYN)+'{' HTML* {pin=2}


//Statement-Ged√∂ns

methodCall ::= '.'IDENTIFIER'('+ identMethodCall* STRING_LITERAL* ')'
identMethodCall ::= IDENTIFIER methodCall
rythmMethodCall ::= RYTHM_KEY_IDENT methodCall

UNDEFINED_IDENT ::= IDENTIFIER

UNDEFINED_IDENT_BLOCK ::= UNDEFINED_IDENT '.'* ':'* '['* RYTHM_FOR* identMethodCall* UNDEFINED_IDENT* STRING_LITERAL* ','* '='* '<'* '('*');'* '+'* ')'* (UNDEFINED_IDENT  ';'* ':'* identMethodCall','*)*

SCRIPT_BLOCK ::= (STRING_LITERAL ':'* IDENTIFIER)','*


//For Java Language Injection

java_code               ::= '{:' JAVA* ':}' {implements= "com.intellij.psi.PsiLanguageInjectionHost"
                                             mixin = "com.rythmplugin.RythmJavaImpl"}


fix ::= GENERICS RYTHM_ESCAPED G VAR FUNCTION THIS NEW DIGIT Q_RYTHM STRING_LITERAL NULL MINUS TILDE AND OR HTML BLOCK_COMMENT GREATER EXCL