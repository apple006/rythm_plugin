{
  parserClass="com.rythmplugin.parser.RythmParser"
  //parserUtilClass="com.rythmplugin.parser.RythmParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Rythm"
  psiImplClassSuffix="Impl"
  psiPackage="com.rythmplugin.psi"
  psiImplPackage="com.rythmplugin.psi.impl"
  //psiImplUtilClass = "com.rythmplugin.parser.RythmPsiImplUtil"

  elementTypeHolderClass="com.rythmplugin.psi.RythmTypes"
  elementTypeClass="com.rythmplugin.lexer.RythmElementType"
  tokenTypeClass="com.rythmplugin.parser.RythmTokenType"

  tokens= [
        AT = "@"
        BAR =           "|"
        LEFTBRACES =    "{:"
        RIGHTBRACES =   ":}"
        COLON =         ":"
        DOT =           "."
        COMMA =         ","
        MUL =           "*"
        LBRACE =        "{"
        RBRACE =        "}"
        LPAREN =        "("
        RPAREN =        ")"

        SEMICOLON =     ";"
        AUSRF =         "!"
        EQ =            "="
        SLASH =         "/"
        HSHTG =         "#"
        BRCSL =         "["
        BRCSR =         "]"
        DOLLAR =        "$"

        PLUS =          "+"
        GF =            '"'

        // Rythm Keywords
        //RYTHM_IF =      "@if"
        //RYTHM_EXTENDS = "@extends"
        //RYTHM_FOR =     "@for"
        //RYTHM_IMPORT =  "@import"
        //RYTHM_ARGS =    "@args"
        //RYTHM_SECTION = "@section"
        //RYTHM_I18N =    "@i18n"
        //RYTHM_PREFIX =  "@prefix"
        //RYTHM_RENDER =  "@render"
        //RYTHM_INVOKE =  "@invoke"

        // Java keywords
        CLASS =         "class"
        EXTENDS =       "extends"
        IMPORT =        "import"
        PACKAGE =       "package"
        STATIC =        "static"
        SUPER =         "super"

        // Regex
        //identifier = "regexp:[a-zA-Z0-9_]"
        //block_comment = 'regexp:\@\*|\*\@|\*(\s*\w+.*)+|\*\s'
        //white_space ='regexp:[\ \t\f\s]'

        //rythm_key = "regexp:\@\w+"
        //text = "regexp:\<[^@}{,]+\>|\<[^@}{,]+|\"\>|\/[^@}{]+\/.\>|\".*\"\>|\'[^@}{]+|\"[^@}{)]+?\>|\"\s|\>|\-\-\>"


  ]

pin(".*Code")=1
//pin(".*Declaration")=1

}

//FILE

rythmFile ::= BLOCK_COMMENT? (initialDeclaration) RYTHM_SECTION RYTHM_KeyBlock HTML_START_RYTHM_BLOCK*/*RYTHM_IF_Statment**/ |  (TEXT) | (RYTHM)| (GENERICS?)

RYTHM ::= RYTHM_PREFIX|RYTHM_IF|RYTHM_I18N/*|RYTHM_EXTENDS*/|RYTHM_FOR|RYTHM_INVOKE/*|RYTHM_SECTION*/|RYTHM_RENDER
//initialDeclaration ::= RYTHM_ARGS|RYTHM_IMPORT|RYTHM_EXTENDS



// INITIAL DECLARATION
initialDeclaration ::= (RYTHM_ARGS| RYTHM_IMPORT |RYTHM_EXTENDS)

RYTHM_ARGS ::= (('@args' qualifiedName)(','*qualifiedName)*) RYTHM_IMPORT* RYTHM_EXTENDS*//(',' qualifiedName GENERICS)*// RYTHM_IMPORT* RYTHM_EXTENDS* TEXT*

RYTHM_IMPORT ::= (('@import' qualifiedName)+) RYTHM_EXTENDS*  // RYTHM_EXTENDS*

RYTHM_EXTENDS ::= ('@extends' '('qualifiedName',' 'title' ':' '(' IDENTIFIER '.' methodCallExpr '+' '"' ':' '"' '+' IDENTIFIER '.' methodCallExpr LPAREN*)// RYTHM_SECTION

qualifiedName ::= (IDENTIFIER+ '.'*)+|IDENTIFIER+


// SECTION

//RYTHM_SECTION ::= ('@section' PARAM '{' TEXT* '}'* RYTHM_I18N* (TEXT rythm_KeyMethod* '.'* methodCallExpr*)* ':'* rythm_KeyMethod'.'* methodCallExpr* '}')*// rythm_KeyMethod* //rythm_keyy*

RYTHM_SECTION ::= (RYTHM_SECTION_WOR  RYTHM_SECTION_WR)

RYTHM_SECTION_WOR ::= '@section' PARAM '{' TEXT '}'

RYTHM_SECTION_WR ::= '@section' PARAM '{' TEXT RYTHM_I18N* TEXT rythm_Key_Ident '.' methodCallExpr TEXT*  rythm_Key_Ident '.' methodCallExpr ':' rythm_Key_Ident '.' methodCallExpr TEXT '}'

// RYTHM PARTS

rythm_Key_Ident ::= RYTHM_KEY

RYTHM_I18N ::= '@i18n''(''"' (IDENTIFIER'.'*)* '"' ')'


PARAM ::= '('IDENTIFIER* ')'

RYTHM_KeyBlock ::= RYTHM_KEY '(' ')' '{' TEXT rythm_method ':' rythm_method TEXT* (RYTHM_IF_Statment HTML_WR*)*

RYTHM_KeyBlock_EXP ::= RYTHM_KEY '(' '"' qualifiedName '"' ')'



RYTHM_IF_Statment ::= '@if' '(' STATEMENT '&&'* IDENTIFIER* '.'* methodCallExpr* '>'* IDENTIFIER* ')'* '{' TEXT rythm_method* TEXT* rythm_method* rythm_Key_Ident* RYTHM_PREFIX* TEXT* rythm_method* TEXT* RYTHM_I18N TEXT rythm_method* TEXT* RYTHM_I18N* TEXT* '}'

STATEMENT ::= EXCL* IDENTIFIER ('.' methodCallExpr+)*

rythm_method ::= RYTHM_KEY '.' methodCallExpr

methodCallExpr ::= (IDENTIFIER LPAREN+ RPAREN+) {pin = 2}

methodCall ::= '.'IDENTIFIER LPAREN RPAREN


//HTML-RYTHM-MIX

HTML_START_RYTHM_BLOCK ::= TEXT rythm_Key_Ident '(' '"' qualifiedName '"' ')' '{' TEXT rythm_method TEXT RYTHM_PREFIX TEXT RYTHM_I18N TEXT rythm_method TEXT RYTHM_I18N TEXT RYTHM_IF_Statment

HTML_WR ::= TEXT RYTHM_PREFIX TEXT rythm_method TEXT RYTHM_I18N TEXT* '}'*

//For Java Language Injection
java_code               ::= '{:' JAVA* ':}' {implements= "com.intellij.psi.PsiLanguageInjectionHost"
                                             mixin = "com.rythmplugin.RythmJavaImpl"}
