{
  parserClass="com.rythmplugin.parser.RythmParser"
  //parserUtilClass="com.rythmplugin.parser.RythmParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Rythm"
  psiImplClassSuffix="Impl"
  psiPackage="com.rythmplugin.psi"
  psiImplPackage="com.rythmplugin.psi.impl"
  //psiImplUtilClass = "com.rythmplugin.parser.RythmPsiImplUtil"

  elementTypeHolderClass="com.rythmplugin.psi.RythmTypes"
  elementTypeClass="com.rythmplugin.lexer.RythmElementType"
  tokenTypeClass="com.rythmplugin.parser.RythmTokenType"

  tokens= [
  AT = "@"

        BAR =           "|"
        LEFTBRACES =    "{:"
        RIGHTBRACES =   ":}"
        COLON =         ":"
        DOT =           "."
        COMMA =         ","
        MUL =           "*"
        LBRACE =        "{"
        RBRACE =        "}"
        LPAREN =        "("
        RPAREN =        ")"

        SEMICOLON =     ";"
        AUSRF =         "!"
        EQ =            "="
        SLASH =         "/"
        HSHTG =         "#"
        BRCSL =         "["
        BRCSR =         "]"
        DOLLAR =        "$"

        PLUS =          "+"
        GF =            '"'

        // Rythm Keywords
        //RYTHM_IF =      "@if"
        //RYTHM_EXTENDS = "@extends"
        //RYTHM_FOR =     "@for"
        //RYTHM_IMPORT =  "@import"
        //RYTHM_ARGS =    "@args"
        //RYTHM_SECTION = "@section"
        //RYTHM_I18N =    "@i18n"
        //RYTHM_PREFIX =  "@prefix"
        //RYTHM_RENDER =  "@render"
        //RYTHM_INVOKE =  "@invoke"

        // Java keywords
        CLASS =         "class"
        EXTENDS =       "extends"
        IMPORT =        "import"
        PACKAGE =       "package"
        STATIC =        "static"
        SUPER =         "super"

        // Regex
        //identifier = "regexp:[a-zA-Z0-9_]"
        //block_comment = 'regexp:\@\*|\*\@|\*(\s*\w+.*)+|\*\s'
        //white_space ='regexp:[\ \t\f\s]'

        //rythm_key = "regexp:\@\w+"
        //text = "regexp:\<[^@}{,]+\>|\<[^@}{,]+|\"\>|\/[^@}{]+\/.\>|\".*\"\>|\'[^@}{]+|\"[^@}{)]+?\>|\"\s|\>|\-\-\>"


  ]

pin(".*Code")=1
pin(".*Declaration")=1

}

rythmFile ::= (initialDeclaration)|(BLOCK_COMMENT)*|  (TEXT) | (RYTHM)| (GENERICS?)

RYTHM ::= RYTHM_PREFIX|RYTHM_IF|RYTHM_I18N|RYTHM_EXTENDS|RYTHM_FOR|RYTHM_INVOKE|RYTHM_SECTION|RYTHM_RENDER|BLOCK_COMMENT
//initialDeclaration ::= RYTHM_ARGS|RYTHM_IMPORT|RYTHM_EXTENDS


initialDeclaration ::= RYTHM_ARGS RYTHM_IMPORT RYTHM_EXTENDS

RYTHM_ARGS ::= ('@args' qualifiedName)//(',' qualifiedName GENERICS)*// RYTHM_IMPORT* RYTHM_EXTENDS* TEXT*

RYTHM_IMPORT ::= ('@import' qualifiedName) RYTHM_IMPORT // RYTHM_EXTENDS*

RYTHM_EXTENDS ::= '@extends' '('qualifiedName'.'IDENTIFIER+',' 'title'':' '('IDENTIFIER+'.'IDENTIFIER+'('IDENTIFIER* '.'* IDENTIFIER*'('*')'')'*'+''"'':''"''+'IDENTIFIER+'.'IDENTIFIER*'('')'')'')' //RYTHM_SECTION*


RYTHM_SECTION ::= '@section' PARAM '{' TEXT* '}'//rythm_keyy*

PARAM ::= '('IDENTIFIER+ ')'

rythm_keyy ::= RYTHM_KEY'('')''{'*

qualifiedName ::= IDENTIFIER+ ('.'* ','* IDENTIFIER+)* (GENERICS* IDENTIFIER* ','* IDENTIFIER* GENERICS)* IDENTIFIER*//BACKUP IDENTIFIER+ ('.' IDENTIFIER* '.' IDENTIFIER*)|IDENTIFIER+
//BLOCK_COMMENT ::= AT '*'|'*'( IDENTIFIER* COMMA* IDENTIFIER*)+|'*' AT

//For Java Language Injection
java_code               ::= '{:' JAVA* ':}' {implements= "com.intellij.psi.PsiLanguageInjectionHost"
                                             mixin = "com.rythmplugin.RythmJavaImpl"}
